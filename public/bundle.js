!function(){"use strict";var e=e=>{e.utils={uid:(()=>{const e={value:"0"};let t="123456789".split("").reduce((e,t,i,n)=>{const o={};o.value=t;o.prev=e;return o},e);e.prev=t;return function(){let e=Date.now();return"object"==typeof performance&&"function"==typeof performance.now&&(e=performance.now().toString().replace(".","")),t=t.prev,`${e}${Math.random().toString(16).substr(2)}${t.value}`}})(),isEqual:function(e,t){for(var i in e)if(e.hasOwnProperty(i)&&!1===function(e,t){var i=Object.prototype.toString.call(e);if(i!==Object.prototype.toString.call(t))return!1;if("[object Function]"===i){if(e.toString()!==t.toString())return!1}else if(e!==t)return!1}(e[i],t[i]))return!1;return!0}}};(()=>{window.addEventListener("load",function(){console.log("window loaded make spinner");let e=document.createElement("div");e.className="lds-grid";for(let t=0;t<9;t++)e.appendChild(document.createElement("div"));e.style.left=window.innerWidth/2-32+"px";let t=document.querySelector("#loading-screen");t.style.width=window.innerWidth+"px",t.style.height=window.innerHeight+"px",t.appendChild(e)},!1)})();var t=function(){var e=new THREE.Matrix4;return function(t,i){i.matrix.copy(t.matrixWorld),i.applyMatrix(e.getInverse(i.parent.matrixWorld))}}();!function(){AFRAME.registerComponent("grabbable",{schema:{origin:{type:"selector"}},init:function(){function e(e){if(e.cancelBubble=!0,!r){r=!0;var t=e.detail.cursorEl;t==o.el.sceneEl&&(t=document.querySelector("[camera]")),o.el.setAttribute("visible",!1),setTimeout(function(){o.el.setAttribute("visible",!0)},20),n(t.object3D),o.originEl.emit("grabStart",e),o.originEl.addState("moving")}}function i(e){r&&(r=!1,o.proxyObject&&(o.proxyObject.parent.remove(o.proxyObject),o.proxyObject=null),o.originEl.setAttribute("position",o.originEl.getAttribute("position")),o.originEl.setAttribute("rotation",o.originEl.getAttribute("rotation")),o.originEl.emit("grabEnd",e),o.originEl.removeState("moving"))}function n(e){o.proxyObject=new THREE.Object3D,o.originEl.visible=!1,setTimeout(function(){o.originEl.visible=!0},1e3),e.add(o.proxyObject),t(o.originEl.object3D,o.proxyObject)}var o=this,r=!1;o.originEl=this.data.origin||this.el,o.proxyObject=null,o.el.classList.add("interactive"),o.el.addEventListener("mousedown",e),AFRAME.utils.device.isMobile()&&o.el.addEventListener("click",function(t){e(t),setTimeout(function(e){document.querySelector("#cam-cursor").setAttribute("material","color: purple"),i(e),setTimeout(function(e){document.querySelector("#cam-cursor").setAttribute("material","color: crimson")},500)},5e3)}),o.el.addEventListener("mouseup",i),CS1.updateGrabbables||(CS1.updateGrabbables=(e=>{if(0===Object.keys(CS1.grabbables).length||!CS1.grabbables[e[0].name]||!CS1.game.hasBegun)return;e.forEach((e,t)=>{let i=CS1.grabbables[e.name];CS1.debug&&(console.log("Individual body data from server:"),console.log(e));e.position&&i.object3D.position.copy(e.position);e.scale&&i.object3D.scale.copy(e.scale);e.rotation&&i.object3D.quaternion.copy(e.rotation)})})),CS1.grabbables||(CS1.grabbables={}),this.name=Object.keys(CS1.grabbables).length,CS1.grabbables[this.name]=this.el},tick:function(){var e=this;e.proxyObject&&(t(e.proxyObject,e.originEl.object3D),e.originEl.setAttribute("position",e.originEl.getAttribute("position")),e.originEl.setAttribute("rotation",e.originEl.getAttribute("rotation")))}})}(),function(){AFRAME.registerComponent("nav-pointer",{init:function(){const e=this.el;e.addEventListener("click",t=>{const i=e.sceneEl.querySelector("[nav-agent]");i&&i.setAttribute("nav-agent",{active:!0,destination:t.detail.intersection.point})}),e.addEventListener("mouseenter",t=>{e.setAttribute("material",{color:"green"})}),e.addEventListener("mouseleave",t=>{e.setAttribute("material",{color:"crimson"})}),e.addEventListener("mousedown",e=>{}),e.sceneEl.addEventListener("object3dset",e=>{this.el.components.raycaster.refreshObjects()})}})}(),function(){AFRAME.registerComponent("player",{init:function(){},tick:function(e,t){},setAvatar:function(e){},setAnimation:function(e){}})}(),function(){AFRAME.registerComponent("d3-graph",{schema:{side:{type:"string",default:"front"},url:{type:"string",default:""}},dependencies:["geometry","material"],init:function(){this.canvas=document.createElement("canvas"),this.canvas.id=CS1.utils.uid(),this.canvas.setAttribute("crossOrigin","anonymous"),document.querySelector("a-scene").appendChild(this.canvas),this.el.setAttribute("material",`shader:flat;src:#${this.canvas.id};side:${this.data.side}`),this.cursor=document.querySelector("#cam-cursor");var e=this.ctx=this.canvas.getContext("2d");e.fillStyle="rgb(0, 0, 0)",e.fillRect(0,0,this.canvas.width,this.canvas.height),this.dataProcessed=!1,fetch(this.data.url).then(e=>e.json()).then(e=>{this.processData(e)}).catch(e=>{console.log(e)})},processData:function(e){this.data=[],e.list.forEach(e=>{console.log(e.dt_txt,this.k2f(e.main.temp_max)+"F");this.data.push({dt:e.dt_txt,temp_max:this.k2f(e.main.temp_max)})}),this.dataProcessed=!0},k2f:function(e){return Math.round(9*(e-273.15)/5+32)},tick:function(e,t){this.dataProcessed&&(this.visualizeData(e),this.updateCanvas())},visualizeData:function(e){let t=this.canvas,i=t.width/this.data.length,n=this.ctx;"green"==this.cursor.getAttribute("material").color&&(e=1e3),this.data.forEach((o,r)=>{let a=e*(o.temp_max/500);n.fillStyle="hsl("+a+", 50%, 30%)";n.fillRect(r*i,0,i,t.height)})},drawRectangles:function(e){var t,i,n=this.canvas,o=this.ctx,r=e/10;o.fillStyle="hsl("+r+", 50%, 80%)",o.fillRect(0,0,n.width,n.height),r=e/15,o.fillStyle="hsl("+r+", 50%, 60%)",t=n.width/10,i=n.height/10,o.fillRect(t,i,n.width-2*t,n.height-2*i),r=e/20,o.fillStyle="hsl("+r+", 50%, 40%)",t=n.width/5,i=n.height/5,o.fillRect(t,i,n.width-2*t,n.height-2*i)},updateCanvas:function(){var e;(e=this.el.getObject3D("mesh").material).map&&(e.map.needsUpdate=!0)}})}();var i={id:139,name:"Polkadot Shader",fragment:"// Gives us dFdx\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\n\nuniform vec3 cameraPosition;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float frequency;\nuniform float radius;\n\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\n\n// Anti-alias step function\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold - afwidth, threshold + afwidth, value);\n}\n \nvoid main() {\n    // Rotate the UV coord by 45 degrees. See \n    // https://en.wikipedia.org/wiki/Rotation_matrix#Common_rotations\n    vec2 st2 = mat2( 0.5, -0.5, 0.5, 0.5 ) * vUv;\n    vec2 nearest = 2.0 * fract( frequency * st2 ) - 1.0;\n    float dist = length( nearest );\n    \n    vec3 fragcolor = mix( color1, color2, aastep( radius, dist ) );\n    gl_FragColor = vec4( fragcolor, 1.0 );\n}",vertex:"/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",uniforms:{cameraPosition:{name:"cameraPosition",type:"v3",glslType:"vec3",description:""},time:{name:"time",type:"f",glslType:"float",description:""},color1:{name:null,type:"c",glslType:"vec3",value:{r:1,g:.5411764705882353,b:.7294117647058823},description:""},color2:{name:null,type:"c",glslType:"vec3",value:{r:0,g:0,b:0},description:""},frequency:{name:null,type:"f",glslType:"float",value:"10",description:""},radius:{name:null,type:"f",glslType:"float",value:"0.5",description:""}},url:"http://shaderfrog.com/app/view/139",user:{username:"andrewray",url:"http://shaderfrog.com/app/profile/andrewray"}},n={id:1068,name:"Sun Shader",fragment:"#define OCTAVES 2\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float brightness;\nuniform float sunSpots;\nuniform vec3 color;\nuniform vec2 speed;\nuniform vec2 resolution;\nvarying vec2 vUv;\nfloat rand(vec2 n) \n{\n    return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);\n}\nfloat noise(vec2 n) \n{\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nfloat fbm(vec2 n) \n{\n    float total = 0.0;\n    float amplitude = 2.0;\n    for (int i = 0;\n i < OCTAVES; i++) \n    {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.3;\n    }\n    return total;\n}\nvec3 tex(vec2 pos) \n{\n    vec3 c1 = (1.0 - sunSpots) * vec3(3.1, 0.0, 0.0);\n    vec3 c2 = vec3(c1);\n    vec3 c3 = vec3(c1);\n    vec3 c4 = vec3(3.0, 0.9, 0.0) * color;\n    vec3 c5 = vec3(c3);\n    vec3 c6 = vec3(c1);\n    vec2 p = pos;\n    float q = fbm(p + time * speed);\n    vec2 r = vec2(fbm(p + q + (time * speed.x) - p.x - p.y), fbm(p + p + (time * speed.y)));\n    vec3 c = color * (mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y));\n    return c;\n}\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(0.0);\n    vec2 p = (vUv - 0.5) * resolution;\n    vec3 col = tex(p);\n    Surface_of_The_Sun1478777938883_101_gl_FragColor = vec4(col * brightness, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_FragColor *= 1.0;\n}\nvoid main() \n{\n    gl_FragColor = (Surface_of_The_Sun1478777938883_101_main());}\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Surface_of_The_Sun1478777938883_101_main() \n{\n    vec4 Surface_of_The_Sun1478777938883_101_gl_Position = vec4(0.0);\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n    Surface_of_The_Sun1478777938883_101_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    return Surface_of_The_Sun1478777938883_101_gl_Position *= 1.0;\n}\nvoid main() \n{\n    gl_Position = Surface_of_The_Sun1478777938883_101_main();}\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},resolution:{value:{x:"100",y:"100"},type:"v2",glslType:"vec2"},brightness:{value:"0.52098325",type:"f",glslType:"float"},speed:{value:{x:.9230769230769231,y:.9230769230769231},type:"v2",glslType:"vec2"},color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},sunSpots:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/1068",user:{username:"entropy",url:"http://shaderfrog.com/app/profile/andrewray"}},o={id:2901,name:"Jelly Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:"0",g:"0",b:"0"},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"2",type:"f",glslType:"float"},contrast:{value:"1.5",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:1,g:.2823529411764706,b:.4823529411764706},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:"0.4",type:"f",glslType:"float"},highlightColor:{value:{r:1,g:.5450980392156862,b:.23529411764705882},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:1,g:.5294117647058824,b:.8156862745098039},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2901",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},r={id:2894,name:"Green Dance",fragment:"#define PI 3.1415926535897932384626433832795\n\nprecision highp float;\nprecision highp int;\nuniform float time;\nuniform float Flowing_Image_Combination1547651045656_420_speed;\nuniform float Flowing_Image_Combination1547651045656_420_resolution;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform vec3 Flowing_Image_Combination1547651045656_420_color;\nuniform vec3 Horizontal_Stripes1547651045669_423_color1;\nuniform vec3 Horizontal_Stripes1547651045669_423_color2;\nuniform float Horizontal_Stripes1547651045669_423_speed;\nuniform float Horizontal_Stripes1547651045669_423_multiplicationFactor;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color1;\nuniform vec3 Vertical_2_Color_Graident1547651045681_426_color2;\nuniform float Checkerboard1547651045687_429_multiplicationFactor;\nuniform float Borg_Hull1547651045698_432_speed;\nuniform float Borg_Hull1547651045698_432_resolution;\nuniform vec3 Borg_Hull1547651045698_432_color;\nuniform float brightness;\nuniform float Disco_Dots1547651045724_435_speed;\nuniform vec2 Disco_Dots1547651045724_435_resolution;\nuniform vec3 Disco_Dots1547651045724_435_color;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvec2 circuit(vec2 p) \n    {\n        p = fract(p);\n        float r = 5.123;\n        float v = 0.0, g = 0.0;\n        r = fract(r * 9184.928);\n        float cp, d;\n        d = p.x;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.x - 1.0;\n        g += pow(clamp(3.0 - abs(d), 0.0, 1.0), 1000.0);\n        d = p.y - 1.0;\n        g += pow(clamp(1.0 - abs(d), 0.0, 1.0), 10000.0);\n        const int iter = 20;\n        for (int i = 0;\n i < iter; i++) \n        {\n            cp = 0.5 + (r - 0.5) * 0.9;\n            d = p.x - cp;\n            g += pow(clamp(1. - abs(d), 0.0, 1.0), 200.0);\n            if (d > 0.0) \n            {\n                r = fract(r * 4829.013);\n                p.x = (p.x - cp) / (1.0 - cp);\n                v += 1.0;\n            }\n else \n            {\n                r = fract(r * 1239.528);\n                p.x = p.x / cp;\n            }\n            p = p.yx;\n        }\n        v /= float(iter);\n        return vec2(g, v);\n    }\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nfloat rand(vec2 co) \n    {\n        return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    }\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_FragColor = vec4(0.0);\n        vec2 uv = Flowing_Image_Combination1547651045656_420_vUv.xy * Flowing_Image_Combination1547651045656_420_resolution;\n        vec4 texCol = vec4(texture2D(image1, uv));\n        mat3 tfm;\n        tfm[0] = vec3(texCol.z, 0.0, 0);\n        tfm[1] = vec3(0.0, texCol.y, 0);\n        tfm[2] = vec3(0, 0, 1.0);\n        vec2 muv = (vec3(uv, 1.0) * tfm).xy + time * Flowing_Image_Combination1547651045656_420_speed;\n        texCol = vec4(vec3(texture2D(image2, muv)) * Flowing_Image_Combination1547651045656_420_color, 1.0);\n        Flowing_Image_Combination1547651045656_420_gl_FragColor = texCol;\n        return Flowing_Image_Combination1547651045656_420_gl_FragColor *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(0.0);\n        float x = fract((Horizontal_Stripes1547651045669_423_vUv.y + (time * Horizontal_Stripes1547651045669_423_speed)) * Horizontal_Stripes1547651045669_423_multiplicationFactor);\n        float f = smoothstep(0.40, 0.5, x) - smoothstep(0.90, 1.0, x);\n        Horizontal_Stripes1547651045669_423_gl_FragColor = vec4(mix(Horizontal_Stripes1547651045669_423_color2, Horizontal_Stripes1547651045669_423_color1, f), 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_FragColor *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main(void) \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(0.0);\n        vec3 mixCol = mix(Vertical_2_Color_Graident1547651045681_426_color2, Vertical_2_Color_Graident1547651045681_426_color1, Vertical_2_Color_Graident1547651045681_426_vUv.y);\n        Vertical_2_Color_Graident1547651045681_426_gl_FragColor = vec4(mixCol, 1.);\n        return Vertical_2_Color_Graident1547651045681_426_gl_FragColor *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_FragColor = vec4(0.0);\n        vec2 t = Checkerboard1547651045687_429_vUv * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 p = vPosition * Checkerboard1547651045687_429_multiplicationFactor;\n        vec3 color;\n        if (mod(floor(t.x) + floor(t.y), 2.0) == 1.0) color = vec3(1.0, 1.0, 1.0);\n else color = vec3(0.0, 0.0, 0.0);\n        Checkerboard1547651045687_429_gl_FragColor = vec4(color, 1.0);\n        return Checkerboard1547651045687_429_gl_FragColor *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_FragColor = vec4(0.0);\n        float scale = 2.0;\n        vec2 uv = (Borg_Hull1547651045698_432_vUv.yx - 0.5) * Borg_Hull1547651045698_432_resolution;\n        uv = uv * scale + vec2(0.0, time * Borg_Hull1547651045698_432_speed);\n        vec2 cid2 = floor(uv);\n        float cid = (cid2.y * 10.0 + cid2.x) * 0.1;\n        vec2 dg = circuit(uv);\n        float d = dg.x;\n        vec3 col1 = (brightness - vec3(max(min(d, 2.0) - 1.0, 0.0) * 2.0 * 0.25)) * Borg_Hull1547651045698_432_color;\n        Borg_Hull1547651045698_432_gl_FragColor = vec4(col1, 1.0);\n        return Borg_Hull1547651045698_432_gl_FragColor *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main(void) \n    {\n        vec4 Disco_Dots1547651045724_435_gl_FragColor = vec4(0.0);\n        vec2 v = Disco_Dots1547651045724_435_vUv.xy * Disco_Dots1547651045724_435_resolution;\n        float brightness = fract(rand(floor(v)) + time * Disco_Dots1547651045724_435_speed);\n        brightness *= 0.5 - length(fract(v) - vec2(0.5, 0.5));\n        Disco_Dots1547651045724_435_gl_FragColor = vec4(2.0 * brightness * Disco_Dots1547651045724_435_color, 1.0);\n        return Disco_Dots1547651045724_435_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Flowing_Image_Combination1547651045656_420_vUv;\nvarying vec2 Horizontal_Stripes1547651045669_423_vUv;\nvarying vec2 Vertical_2_Color_Graident1547651045681_426_vUv;\nvarying vec2 Checkerboard1547651045687_429_vUv;\nvarying vec3 vPosition;\nvarying vec2 Borg_Hull1547651045698_432_vUv;\nvarying vec2 Disco_Dots1547651045724_435_vUv;\nvec4 Flowing_Image_Combination1547651045656_420_main() \n    {\n        vec4 Flowing_Image_Combination1547651045656_420_gl_Position = vec4(0.0);\n        Flowing_Image_Combination1547651045656_420_vUv = uv;\n        Flowing_Image_Combination1547651045656_420_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Flowing_Image_Combination1547651045656_420_gl_Position *= 1.0;\n    }\nvec4 Horizontal_Stripes1547651045669_423_main() \n    {\n        vec4 Horizontal_Stripes1547651045669_423_gl_Position = vec4(0.0);\n        Horizontal_Stripes1547651045669_423_vUv = uv;\n        Horizontal_Stripes1547651045669_423_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Horizontal_Stripes1547651045669_423_gl_Position *= 0.3;\n    }\nvec4 Vertical_2_Color_Graident1547651045681_426_main() \n    {\n        vec4 Vertical_2_Color_Graident1547651045681_426_gl_Position = vec4(0.0);\n        Vertical_2_Color_Graident1547651045681_426_vUv = uv;\n        Vertical_2_Color_Graident1547651045681_426_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Vertical_2_Color_Graident1547651045681_426_gl_Position *= 1.0;\n    }\nvec4 Checkerboard1547651045687_429_main() \n    {\n        vec4 Checkerboard1547651045687_429_gl_Position = vec4(0.0);\n        Checkerboard1547651045687_429_vUv = uv;\n        vPosition = position;\n        Checkerboard1547651045687_429_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Checkerboard1547651045687_429_gl_Position *= -0.5;\n    }\nvec4 Borg_Hull1547651045698_432_main() \n    {\n        vec4 Borg_Hull1547651045698_432_gl_Position = vec4(0.0);\n        Borg_Hull1547651045698_432_vUv = uv;\n        Borg_Hull1547651045698_432_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Borg_Hull1547651045698_432_gl_Position *= -0.7;\n    }\nvec4 Disco_Dots1547651045724_435_main() \n    {\n        vec4 Disco_Dots1547651045724_435_gl_Position = vec4(0.0);\n        Disco_Dots1547651045724_435_vUv = uv;\n        Disco_Dots1547651045724_435_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Dots1547651045724_435_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Flowing_Image_Combination1547651045656_420_main() + Horizontal_Stripes1547651045669_423_main() + Vertical_2_Color_Graident1547651045681_426_main() + Checkerboard1547651045687_429_main() + Borg_Hull1547651045698_432_main() + Disco_Dots1547651045724_435_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},image1:{value:null,type:"t",glslType:"sampler2D"},image2:{value:null,type:"t",glslType:"sampler2D"},Flowing_Image_Combination1547651045656_420_speed:{value:"0.1",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_resolution:{value:"2",type:"f",glslType:"float"},Flowing_Image_Combination1547651045656_420_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color1:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_color2:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Horizontal_Stripes1547651045669_423_speed:{value:"0",type:"f",glslType:"float"},Horizontal_Stripes1547651045669_423_multiplicationFactor:{value:"6",type:"f",glslType:"float"},Vertical_2_Color_Graident1547651045681_426_color1:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Vertical_2_Color_Graident1547651045681_426_color2:{value:{r:0,g:.9764705882352941,b:0},type:"c",glslType:"vec3"},Checkerboard1547651045687_429_multiplicationFactor:{value:"12",type:"f",glslType:"float"},brightness:{value:"0.25",type:"f",glslType:"float"},Borg_Hull1547651045698_432_speed:{value:"0.001",type:"f",glslType:"float"},Borg_Hull1547651045698_432_resolution:{value:"1",type:"f",glslType:"float"},Borg_Hull1547651045698_432_color:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},Disco_Dots1547651045724_435_speed:{value:"0.01",type:"f",glslType:"float"},Disco_Dots1547651045724_435_resolution:{value:{x:"12",y:"12",z:0},type:"v2",glslType:"vec2"},Disco_Dots1547651045724_435_color:{value:{r:.5254901960784314,g:.9725490196078431,b:.6352941176470588},type:"c",glslType:"vec3"}},url:"http://shaderfrog.com/app/view/2894",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},a={id:2987,name:"Cosmic Shader",fragment:"#define TAU 6.28318530718\n#define MAX_ITER 5\n#define tau 6.2831853\n\n#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\nprecision highp int;\nuniform vec2 Tiling_Caustic1477531952046_152_resolution;\nuniform vec3 backgroundColor;\nuniform vec3 Tiling_Caustic1477531952046_152_color;\nuniform float Tiling_Caustic1477531952046_152_speed;\nuniform float Tiling_Caustic1477531952046_152_brightness;\nuniform float time;\nuniform float contrast;\nuniform float distortion;\nuniform float Noise_Ripples1477531959288_166_speed;\nuniform vec3 Noise_Ripples1477531959288_166_color;\nuniform float Noise_Ripples1477531959288_166_brightness;\nuniform sampler2D noiseImage;\nuniform vec2 Noise_Ripples1477531959288_166_resolution;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform float highlightIntensity;\nuniform vec3 highlightColor;\nuniform vec3 Wiggly_Improved1477532051339_181_color;\nuniform vec3 Transparent_Glow1477532059126_201_color;\nuniform float Transparent_Glow1477532059126_201_start;\nuniform float Transparent_Glow1477532059126_201_end;\nuniform float Transparent_Glow1477532059126_201_alpha;\nuniform vec3 Glow_Effect1477532183055_216_color;\nuniform float Glow_Effect1477532183055_216_start;\nuniform float Glow_Effect1477532183055_216_end;\nuniform float Glow_Effect1477532183055_216_alpha;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nmat2 makem2(in float theta) \n    {\n        float c = cos(theta);\n        float s = sin(theta);\n        return mat2(c, -s, s, c);\n    }\nfloat noise(in vec2 x) \n    {\n        return texture2D(noiseImage, x * .01).x;\n    }\nfloat fbm(in vec2 p) \n    {\n        float z = 2.;\n        float rz = 0.;\n        vec2 bp = p;\n        for (float i = 1.;\n i < 6.0; i++) \n        {\n            rz += abs((noise(p) - 0.5) * 2.0) / z;\n            z = z * 2.;\n            p = p * 2.;\n        }\n        return rz;\n    }\nfloat dualfbm(in vec2 p) \n    {\n        vec2 p2 = p * distortion;\n        vec2 basis = vec2(fbm(p2 - time * Noise_Ripples1477531959288_166_speed * 1.6), fbm(p2 + time * Noise_Ripples1477531959288_166_speed * 1.7));\n        basis = (basis - .5) * .2;\n        p += basis;\n        return fbm(p * makem2(time * Noise_Ripples1477531959288_166_speed * 0.2));\n    }\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_FragColor = vec4(0.0);\n        vec2 uv = Tiling_Caustic1477531952046_152_vUv * Tiling_Caustic1477531952046_152_resolution;\n        vec2 p = mod(uv * TAU, TAU) - 250.0;\n        vec2 i = vec2(p);\n        float c = 1.0;\n        float inten = 0.005;\n        for (int n = 0;\n n < MAX_ITER; n++) \n        {\n            float t = time * Tiling_Caustic1477531952046_152_speed * (1.0 - (3.5 / float(n + 1)));\n            i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n            c += 1.0 / length(vec2(p.x / (sin(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));\n        }\n        c /= float(MAX_ITER);\n        c = 1.17 - pow(c, Tiling_Caustic1477531952046_152_brightness);\n        vec3 rgb = vec3(pow(abs(c), 8.0));\n        Tiling_Caustic1477531952046_152_gl_FragColor = vec4(rgb * Tiling_Caustic1477531952046_152_color + backgroundColor, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_FragColor *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_FragColor = vec4(0.0);\n        vec2 p = (Noise_Ripples1477531959288_166_vUv.xy - 0.5) * Noise_Ripples1477531959288_166_resolution;\n        float rz = dualfbm(p);\n        vec3 col = (Noise_Ripples1477531959288_166_color / rz) * Noise_Ripples1477531959288_166_brightness;\n        col = ((col - 0.5) * max(contrast, 0.0)) + 0.5;\n        Noise_Ripples1477531959288_166_gl_FragColor = vec4(col, 1.0);\n        return Noise_Ripples1477531959288_166_gl_FragColor *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_FragColor = vec4(0.0);\n        Wiggly_Improved1477532051339_181_gl_FragColor = vec4(clamp(highlightColor * highlightIntensity * light, 0.0, 1.0), 1.0);\n        return Wiggly_Improved1477532051339_181_gl_FragColor *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Transparent_Glow1477532059126_201_fNormal);\n        vec3 eye = normalize(-Transparent_Glow1477532059126_201_fPosition.xyz);\n        float rim = smoothstep(Transparent_Glow1477532059126_201_start, Transparent_Glow1477532059126_201_end, 1.0 - dot(normal, eye));\n        float value = clamp(rim * Transparent_Glow1477532059126_201_alpha, 0.0, 1.0);\n        Transparent_Glow1477532059126_201_gl_FragColor = vec4(Transparent_Glow1477532059126_201_color * value, value);\n        return Transparent_Glow1477532059126_201_gl_FragColor *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_FragColor = vec4(0.0);\n        vec3 normal = normalize(Glow_Effect1477532183055_216_fNormal);\n        vec3 eye = normalize(-Glow_Effect1477532183055_216_fPosition.xyz);\n        float rim = smoothstep(Glow_Effect1477532183055_216_start, Glow_Effect1477532183055_216_end, 1.0 - dot(normal, eye));\n        Glow_Effect1477532183055_216_gl_FragColor = vec4(clamp(rim, 0.0, 1.0) * Glow_Effect1477532183055_216_alpha * Glow_Effect1477532183055_216_color, 1.0);\n        return Glow_Effect1477532183055_216_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Glow_Effect1477532183055_216_main() + Noise_Ripples1477531959288_166_main() + Tiling_Caustic1477531952046_152_main() + Wiggly_Improved1477532051339_181_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform float Wiggly_Improved1477532051339_181_speed;\nuniform float frequency;\nuniform float amplitude;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 Tiling_Caustic1477531952046_152_vPosition;\nvarying vec3 Tiling_Caustic1477531952046_152_vNormal;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv;\nvarying vec2 Tiling_Caustic1477531952046_152_vUv2;\nvarying vec3 Noise_Ripples1477531959288_166_vPosition;\nvarying vec3 Noise_Ripples1477531959288_166_vNormal;\nvarying vec2 Noise_Ripples1477531959288_166_vUv;\nvarying vec2 Noise_Ripples1477531959288_166_vUv2;\nvarying vec3 Wiggly_Improved1477532051339_181_vNormal;\nvarying float light;\nvarying vec3 Wiggly_Improved1477532051339_181_vPosition;\nvarying vec3 Transparent_Glow1477532059126_201_fNormal;\nvarying vec3 Transparent_Glow1477532059126_201_fPosition;\nvarying vec3 Glow_Effect1477532183055_216_fNormal;\nvarying vec3 Glow_Effect1477532183055_216_fPosition;\nvec4 Tiling_Caustic1477531952046_152_main() \n    {\n        vec4 Tiling_Caustic1477531952046_152_gl_Position = vec4(0.0);\n        Tiling_Caustic1477531952046_152_vNormal = normal;\n        Tiling_Caustic1477531952046_152_vUv = uv;\n        Tiling_Caustic1477531952046_152_vUv2 = uv2;\n        Tiling_Caustic1477531952046_152_vPosition = position;\n        Tiling_Caustic1477531952046_152_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Tiling_Caustic1477531952046_152_gl_Position *= 1.0;\n    }\nvec4 Noise_Ripples1477531959288_166_main() \n    {\n        vec4 Noise_Ripples1477531959288_166_gl_Position = vec4(0.0);\n        Noise_Ripples1477531959288_166_vNormal = normal;\n        Noise_Ripples1477531959288_166_vUv = uv;\n        Noise_Ripples1477531959288_166_vUv2 = uv2;\n        Noise_Ripples1477531959288_166_vPosition = position;\n        Noise_Ripples1477531959288_166_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Noise_Ripples1477531959288_166_gl_Position *= 1.0;\n    }\nvec4 Wiggly_Improved1477532051339_181_main() \n    {\n        vec4 Wiggly_Improved1477532051339_181_gl_Position = vec4(0.0);\n        vec3 offset = normalize(vec3(0.0) - position) * (amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + position.y * frequency));\n        vec3 newPosition = position + vec3(offset.x, 0.0, offset.z);\n        light = amplitude * sin(Wiggly_Improved1477532051339_181_speed * time + 1.0 + position.y * frequency);\n        Wiggly_Improved1477532051339_181_vPosition = newPosition;\n        Wiggly_Improved1477532051339_181_gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n        return Wiggly_Improved1477532051339_181_gl_Position *= 1.0;\n    }\nvec4 Transparent_Glow1477532059126_201_main() \n    {\n        vec4 Transparent_Glow1477532059126_201_gl_Position = vec4(0.0);\n        Transparent_Glow1477532059126_201_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Transparent_Glow1477532059126_201_fPosition = pos.xyz;\n        Transparent_Glow1477532059126_201_gl_Position = projectionMatrix * pos;\n        return Transparent_Glow1477532059126_201_gl_Position *= 1.0;\n    }\nvec4 Glow_Effect1477532183055_216_main() \n    {\n        vec4 Glow_Effect1477532183055_216_gl_Position = vec4(0.0);\n        Glow_Effect1477532183055_216_fNormal = normalize(normalMatrix * normal);\n        vec4 pos = modelViewMatrix * vec4(position, 1.0);\n        Glow_Effect1477532183055_216_fPosition = pos.xyz;\n        Glow_Effect1477532183055_216_gl_Position = projectionMatrix * pos;\n        return Glow_Effect1477532183055_216_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Tiling_Caustic1477531952046_152_main() + Noise_Ripples1477531959288_166_main() + Wiggly_Improved1477532051339_181_main() + Transparent_Glow1477532059126_201_main() + Glow_Effect1477532183055_216_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},backgroundColor:{value:{r:.08235294117647059,g:.06274509803921569,b:.19607843137254902},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_resolution:{value:{x:1,y:1},type:"v2",glslType:"vec2"},Tiling_Caustic1477531952046_152_color:{value:{r:.4666666666666667,g:.9294117647058824,b:.9529411764705882},type:"c",glslType:"vec3"},Tiling_Caustic1477531952046_152_speed:{value:"0.5",type:"f",glslType:"float"},Tiling_Caustic1477531952046_152_brightness:{value:"1.5",type:"f",glslType:"float"},noiseImage:{value:null,type:"t",glslType:"sampler2D"},distortion:{value:"1",type:"f",glslType:"float"},contrast:{value:"1.4",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_speed:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_color:{value:{r:.6823529411764706,g:.7725490196078432,b:.6666666666666666},type:"c",glslType:"vec3"},Noise_Ripples1477531959288_166_brightness:{value:"0.1",type:"f",glslType:"float"},Noise_Ripples1477531959288_166_resolution:{value:{x:"2",y:"2"},type:"v2",glslType:"vec2"},amplitude:{value:"0.2",type:"f",glslType:"float"},frequency:{value:"2",type:"f",glslType:"float"},highlightIntensity:{value:".5",type:"f",glslType:"float"},highlightColor:{value:{r:.8274509803921568,g:.5882352941176471,b:.2627450980392157},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_color:{value:{r:0,g:0,b:0},type:"c",glslType:"vec3"},Wiggly_Improved1477532051339_181_speed:{value:"1",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_color:{value:{r:.9803921568627451,g:.9215686274509803,b:.596078431372549},type:"c",glslType:"vec3"},Transparent_Glow1477532059126_201_start:{value:"0.54674743",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_end:{value:"0.44399246",type:"f",glslType:"float"},Transparent_Glow1477532059126_201_alpha:{value:"0.5",type:"f",glslType:"float"},Glow_Effect1477532183055_216_color:{value:{r:.9921568627450981,g:.7254901960784313,b:.3411764705882353},type:"c",glslType:"vec3"},Glow_Effect1477532183055_216_start:{value:"0",type:"f",glslType:"float"},Glow_Effect1477532183055_216_end:{value:"1.9",type:"f",glslType:"float"},Glow_Effect1477532183055_216_alpha:{value:"2",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/2987",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},l={id:138,name:"Cool Tiles Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform float Flowing_Image_Combination1532324436254_38_speed;\nuniform float resolution;\nuniform sampler2D image1;\nuniform sampler2D image2;\nuniform vec3 Flowing_Image_Combination1532324436254_38_color;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform vec3 lightPosition;\nuniform sampler2D map;\nuniform vec3 diffuseColor;\nuniform vec3 specularColor;\nuniform float shininess;\nuniform vec2 scaleBias;\nuniform float scale;\nuniform float Disco_Ball1532324436329_44_speed;\nuniform vec3 Vignette1532324436351_47_color;\nuniform float intensity;\nuniform float spread;\nuniform float mirrorReflection;\nuniform samplerCube reflectionSampler;\nvarying vec2 Flowing_Image_Combination1532324436254_38_vUv;\nvarying vec3 vPosition;\nvarying vec3 Parallax_Mapping1532324436298_41_vNormal;\nvarying vec2 Parallax_Mapping1532324436298_41_vUv;\nvarying vec2 vUv2;\nvarying vec3 tsPosition;\nvarying vec3 tsCameraPosition;\nvarying vec3 tsLightSource;\nvarying vec3 Disco_Ball1532324436329_44_vNormal;\nvarying vec2 Disco_Ball1532324436329_44_vUv;\nfloat rand(in vec2 p) \n    {\n        return abs(fract(sin(p.x * 95325.328 + p.y * -48674.077) + cos(p.x * -46738.322 + p.y * 76485.077) + time * Disco_Ball1532324436329_44_speed) - .5) + .5;\n    }\nvarying vec2 Vignette1532324436351_47_vUv;\nvarying vec3 vReflect;\nvec4 Flowing_Image_Combination1532324436254_38_main() \n    {\n        vec4 Flowing_Image_Combination1532324436254_38_gl_FragColor = vec4(0.0);\n        vec2 uv = Flowing_Image_Combination1532324436254_38_vUv.xy * resolution;\n        vec4 texCol = vec4(texture2D(image1, uv));\n        mat3 tfm;\n        tfm[0] = vec3(texCol.z, 0.0, 0);\n        tfm[1] = vec3(0.0, texCol.y, 0);\n        tfm[2] = vec3(0, 0, 1.0);\n        vec2 muv = (vec3(uv, 1.0) * tfm).xy + time * Flowing_Image_Combination1532324436254_38_speed;\n        texCol = vec4(vec3(texture2D(image2, muv)) * Flowing_Image_Combination1532324436254_38_color, 1.0);\n        Flowing_Image_Combination1532324436254_38_gl_FragColor = texCol;\n        return Flowing_Image_Combination1532324436254_38_gl_FragColor *= 0.6;\n    }\nvec4 Parallax_Mapping1532324436298_41_main() \n    {\n        vec4 Parallax_Mapping1532324436298_41_gl_FragColor = vec4(0.0);\n        float height = texture2D(map, Parallax_Mapping1532324436298_41_vUv).a;\n        float v = height * scaleBias.r - scaleBias.g;\n        vec3 eye = normalize(tsCameraPosition);\n        vec2 newCoords = Parallax_Mapping1532324436298_41_vUv + (eye.xy * v);\n        vec3 color = vec3(0.0);\n        vec3 normal = texture2D(map, newCoords).rgb * 2.0 - 1.0;\n        vec3 viewVector = normalize(tsCameraPosition - tsPosition);\n        vec3 lightVector = normalize(tsLightSource - tsPosition);\n        float nxDir = max(0.0, dot(normal, lightVector));\n        float specularPower = 0.0;\n        if (nxDir != 0.0) \n        {\n            vec3 halfVector = normalize(lightVector + viewVector);\n            float nxHalf = max(0.0, dot(normal, halfVector));\n            specularPower = pow(nxHalf, shininess);\n        }\n         vec3 specular = specularColor * specularPower;\n        Parallax_Mapping1532324436298_41_gl_FragColor = vec4((diffuseColor * nxDir) + specular, 1.0);\n        return Parallax_Mapping1532324436298_41_gl_FragColor *= 0.9;\n    }\nvec4 Disco_Ball1532324436329_44_main(void) \n    {\n        vec4 Disco_Ball1532324436329_44_gl_FragColor = vec4(0.0);\n        vec2 position = (Disco_Ball1532324436329_44_vUv.xy) * scale;\n        vec3 color = vec3(rand(vec2(floor(position.x), floor(position.y))), rand(vec2(floor(position.x), floor(position.x))), rand(vec2(floor(position.x * .5), floor(position.y * .5))));\n        float scale = 1. - pow(pow((mod(position.x, 1.) - .5), 2.) + pow((mod(position.y, 1.) - .5), 2.), .7);\n        Disco_Ball1532324436329_44_gl_FragColor = vec4(color * scale, 1.);\n        return Disco_Ball1532324436329_44_gl_FragColor *= 0.1;\n    }\nvec4 Vignette1532324436351_47_main() \n    {\n        vec4 Vignette1532324436351_47_gl_FragColor = vec4(0.0);\n        float vignette = Vignette1532324436351_47_vUv.y * Vignette1532324436351_47_vUv.x * (1. - Vignette1532324436351_47_vUv.x) * (1. - Vignette1532324436351_47_vUv.y) * spread;\n        vec3 multiplier = 1.0 - (vignette * Vignette1532324436351_47_color * intensity);\n        Vignette1532324436351_47_gl_FragColor = vec4(clamp(Vignette1532324436351_47_color * multiplier, 0.0, 1.0), multiplier);\n        return Vignette1532324436351_47_gl_FragColor *= 0.2;\n    }\nvec4 Reflection_Cube_Map1532324436362_50_main() \n    {\n        vec4 Reflection_Cube_Map1532324436362_50_gl_FragColor = vec4(0.0);\n        vec4 cubeColor = textureCube(reflectionSampler, vec3(mirrorReflection * vReflect.x, vReflect.yz));\n        cubeColor.w = 1.0;\n        Reflection_Cube_Map1532324436362_50_gl_FragColor = cubeColor;\n        return Reflection_Cube_Map1532324436362_50_gl_FragColor *= 0.3;\n    }\nvoid main() \n    {\n        gl_FragColor = (Flowing_Image_Combination1532324436254_38_main() + Parallax_Mapping1532324436298_41_main() + Disco_Ball1532324436329_44_main() + Vignette1532324436351_47_main() + Reflection_Cube_Map1532324436362_50_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 lightPosition;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 Flowing_Image_Combination1532324436254_38_vUv;\nattribute vec4 tangent;\nvarying vec3 vPosition;\nvarying vec3 Parallax_Mapping1532324436298_41_vNormal;\nvarying vec2 Parallax_Mapping1532324436298_41_vUv;\nvarying vec2 vUv2;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 tsPosition;\nvarying vec3 tsCameraPosition;\nvarying vec3 tsLightSource;\nvarying vec2 Disco_Ball1532324436329_44_vUv;\nvarying vec3 Disco_Ball1532324436329_44_vNormal;\nvarying vec2 Vignette1532324436351_47_vUv;\nvarying vec3 vReflect;\nvec4 Flowing_Image_Combination1532324436254_38_main() \n    {\n        vec4 Flowing_Image_Combination1532324436254_38_gl_Position = vec4(0.0);\n        Flowing_Image_Combination1532324436254_38_vUv = uv;\n        Flowing_Image_Combination1532324436254_38_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Flowing_Image_Combination1532324436254_38_gl_Position *= 0.6;\n    }\nvec4 Parallax_Mapping1532324436298_41_main(void) \n    {\n        vec4 Parallax_Mapping1532324436298_41_gl_Position = vec4(0.0);\n        Parallax_Mapping1532324436298_41_vUv = uv;\n        vPosition = position;\n        Parallax_Mapping1532324436298_41_vNormal = normalize(normal);\n        vTangent = normalize(tangent.xyz);\n        vBinormal = normalize(cross(Parallax_Mapping1532324436298_41_vNormal, vTangent) * tangent.w);\n        mat3 TBNMatrix = mat3(vTangent, vBinormal, Parallax_Mapping1532324436298_41_vNormal);\n        tsPosition = position * TBNMatrix;\n        tsCameraPosition = cameraPosition * TBNMatrix;\n        tsLightSource = lightPosition * TBNMatrix;\n        Parallax_Mapping1532324436298_41_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Parallax_Mapping1532324436298_41_gl_Position *= 0.9;\n    }\nvec4 Disco_Ball1532324436329_44_main() \n    {\n        vec4 Disco_Ball1532324436329_44_gl_Position = vec4(0.0);\n        Disco_Ball1532324436329_44_vNormal = normal;\n        Disco_Ball1532324436329_44_vUv = uv;\n        Disco_Ball1532324436329_44_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Ball1532324436329_44_gl_Position *= 0.1;\n    }\nvec4 Vignette1532324436351_47_main() \n    {\n        vec4 Vignette1532324436351_47_gl_Position = vec4(0.0);\n        Vignette1532324436351_47_vUv = uv;\n        Vignette1532324436351_47_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Vignette1532324436351_47_gl_Position *= 0.2;\n    }\nvec4 Reflection_Cube_Map1532324436362_50_main() \n    {\n        vec4 Reflection_Cube_Map1532324436362_50_gl_Position = vec4(0.0);\n        vec3 worldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n        vec3 cameraToVertex = normalize(worldPosition - cameraPosition);\n        vec3 worldNormal = normalize(mat3(modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz) * normal);\n        vReflect = reflect(cameraToVertex, worldNormal);\n        Reflection_Cube_Map1532324436362_50_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Reflection_Cube_Map1532324436362_50_gl_Position *= 0.3;\n    }\nvoid main() \n    {\n        gl_Position = Flowing_Image_Combination1532324436254_38_main() + Parallax_Mapping1532324436298_41_main() + Disco_Ball1532324436329_44_main() + Vignette1532324436351_47_main() + Reflection_Cube_Map1532324436362_50_main();    }\n",uniforms:{resolution:{value:"1",type:"f",glslType:"float"},image1:{value:null,type:"t",glslType:"sampler2D"},image2:{value:null,type:"t",glslType:"sampler2D"},time:{type:"f",glslType:"float"},Flowing_Image_Combination1532324436254_38_speed:{value:"0.05",type:"f",glslType:"float"},Flowing_Image_Combination1532324436254_38_color:{value:{r:1,g:"1",b:"1"},type:"c",glslType:"vec3"},map:{value:null,type:"t",glslType:"sampler2D"},diffuseColor:{value:{r:.2235294117647059,g:.2235294117647059,b:.2235294117647059},type:"c",glslType:"vec3"},specularColor:{value:{r:1,g:1,b:1},type:"c",glslType:"vec3"},shininess:{value:"10",type:"f",glslType:"float"},scaleBias:{value:{x:"0.04",y:"0.001",z:0},type:"v2",glslType:"vec2"},Parallax_Mapping1532324436298_41_lightPosition:{value:{x:-.04058137118438604,y:.3281411389717793,z:2.4780388506290807},type:"v3",glslType:"vec3"},scale:{value:"4",type:"f",glslType:"float"},Disco_Ball1532324436329_44_speed:{value:"1",type:"f",glslType:"float"},intensity:{value:"0.5",type:"f",glslType:"float"},spread:{value:"100",type:"f",glslType:"float"},Vignette1532324436351_47_color:{value:{r:.8980392156862745,g:.9607843137254902,b:.9921568627450981},type:"c",glslType:"vec3"},mirrorReflection:{value:"1",type:"f",glslType:"float"},reflectionSampler:{value:null,type:"t",glslType:"samplerCube"}},url:"http://shaderfrog.com/app/view/138",user:{username:"andrewray",url:"http://shaderfrog.com/app/profile/andrewray"}},s={id:3033,name:"Disco Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float time;\nuniform float scale;\nuniform float speed;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nfloat rand(in vec2 p) \n    {\n        return abs(fract(sin(p.x * 95325.328 + p.y * -48674.077) + cos(p.x * -46738.322 + p.y * 76485.077) + time * speed) - .5) + .5;\n    }\nvec4 Disco_Ball1551665981578_213_main(void) \n    {\n        vec4 Disco_Ball1551665981578_213_gl_FragColor = vec4(0.0);\n        vec2 position = (vUv.xy) * scale;\n        vec3 color = vec3(rand(vec2(floor(position.x), floor(position.y))), rand(vec2(floor(position.x), floor(position.x))), rand(vec2(floor(position.x * .5), floor(position.y * .5))));\n        float scale = 1. - pow(pow((mod(position.x, 1.) - .5), 2.) + pow((mod(position.y, 1.) - .5), 2.), .7);\n        Disco_Ball1551665981578_213_gl_FragColor = vec4(color * scale, 1.);\n        return Disco_Ball1551665981578_213_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Disco_Ball1551665981578_213_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvec4 Disco_Ball1551665981578_213_main() \n    {\n        vec4 Disco_Ball1551665981578_213_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        Disco_Ball1551665981578_213_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Disco_Ball1551665981578_213_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Disco_Ball1551665981578_213_main();    }\n",uniforms:{time:{type:"f",glslType:"float"},scale:{value:"30",type:"f",glslType:"float"},speed:{value:"1",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3033",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},c={id:3053,name:"Marching Ants Shader",fragment:"precision highp float;\nprecision highp int;\nuniform float edgeWidth;\nuniform float sharpness;\nuniform float antSize;\nuniform float antSpeed;\nuniform float time;\nuniform vec3 color;\nvarying vec2 vUv;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main() \n    {\n        vec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor = vec4(0.0);\n        vec2 borderUv = abs((vUv - 0.5) * 2.0);\n        float leftRight = clamp((borderUv.x - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n        float upDown = clamp((borderUv.y - (1.0 - edgeWidth)) * sharpness, 0.0, 1.0);\n        vec2 antUv = vUv * antSize;\n        float antOffset = time * antSpeed;\n        if (mod(floor(antUv.x + antOffset), 2.0) != 1.0) \n        {\n            upDown = 0.0;\n        }\n         if (mod(floor(antUv.y + antOffset), 2.0) != 1.0) \n        {\n            leftRight = 0.0;\n        }\n         float alpha = clamp(leftRight + upDown, 0.0, 1.0);\n        Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor = vec4(color * alpha, alpha);\n        return Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec2 vUv;\nvec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main() \n    {\n        vec4 Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position = vec4(0.0);\n        vUv = uv;\n        Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Marching_Ants_UV_Based_Border_Edge_Outline1551694606526_1465_main();    }\n",uniforms:{color:{value:{r:"1",g:"1",b:"1"},type:"c",glslType:"vec3"},edgeWidth:{value:"0.1",type:"f",glslType:"float"},sharpness:{value:"100",type:"f",glslType:"float"},antSize:{value:"10",type:"f",glslType:"float"},antSpeed:{value:"1",type:"f",glslType:"float"},time:{type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3053",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},u={id:3060,name:"Goo Shader",fragment:"precision highp float;\nprecision highp int;\nuniform vec3 color;\nuniform float time;\nuniform float Configurable_Oil_Spill1525321525720_28_speed;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform vec3 color4;\nvarying float vNoise;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nfloat rand(vec2 n) \n    {\n        return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    }\nfloat noise(vec2 n) \n    {\n        const vec2 d = vec2(0.0, 1.0);\n        vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n        return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n    }\nfloat fbm(vec2 n) \n    {\n        float total = 0.0, amplitude = 1.0;\n        for (int i = 0;\n i < 7; i++) \n        {\n            total += noise(n) * amplitude;\n            n += n;\n            amplitude *= 0.5;\n        }\n        return total;\n    }\nvec4 Big_Wiggles1525321525655_25_main() \n    {\n        vec4 Big_Wiggles1525321525655_25_gl_FragColor = vec4(0.0);\n        Big_Wiggles1525321525655_25_gl_FragColor = vec4(color * vNoise, 1.0);\n        return Big_Wiggles1525321525655_25_gl_FragColor *= 1.0;\n    }\nvec4 Configurable_Oil_Spill1525321525720_28_main() \n    {\n        vec4 Configurable_Oil_Spill1525321525720_28_gl_FragColor = vec4(0.0);\n        const vec3 c5 = vec3(0.1);\n        const vec3 c6 = vec3(0.9);\n        vec2 p = vUv.xy * 8.0;\n        float timed = time * Configurable_Oil_Spill1525321525720_28_speed;\n        float q = fbm(p - timed * 0.1);\n        vec2 r = vec2(fbm(p + q + timed * 0.7 - p.x - p.y), fbm(p + q - timed * 0.4));\n        vec3 c = mix(color1, color2, fbm(p + r)) + mix(color3, color4, r.x) - mix(c5, c6, r.y);\n        Configurable_Oil_Spill1525321525720_28_gl_FragColor = vec4(c * cos(1.57 * vUv.y), 1.0);\n        return Configurable_Oil_Spill1525321525720_28_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = (Big_Wiggles1525321525655_25_main() + Configurable_Oil_Spill1525321525720_28_main());    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform float scale;\nuniform float displacement;\nuniform float time;\nuniform float Big_Wiggles1525321525655_25_speed;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying float vNoise;\nvec3 mod289(vec3 x) \n    {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\nvec4 mod289(vec4 x) \n    {\n        return x - floor(x * (1.0 / 289.0)) * 289.0;\n    }\nvec4 permute(vec4 x) \n    {\n        return mod289(((x * 34.0) + 1.0) * x);\n    }\nvec4 taylorInvSqrt(vec4 r) \n    {\n        return 1.79284291400159 - 0.85373472095314 * r;\n    }\nvec3 fade(vec3 t) \n    {\n        return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n    }\nfloat cnoise(vec3 P) \n    {\n        vec3 Pi0 = floor(P);\n        vec3 Pi1 = Pi0 + vec3(1.0);\n        Pi0 = mod289(Pi0);\n        Pi1 = mod289(Pi1);\n        vec3 Pf0 = fract(P);\n        vec3 Pf1 = Pf0 - vec3(1.0);\n        vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n        vec4 iy = vec4(Pi0.yy, Pi1.yy);\n        vec4 iz0 = Pi0.zzzz;\n        vec4 iz1 = Pi1.zzzz;\n        vec4 ixy = permute(permute(ix) + iy);\n        vec4 ixy0 = permute(ixy + iz0);\n        vec4 ixy1 = permute(ixy + iz1);\n        vec4 gx0 = ixy0 * (1.0 / 7.0);\n        vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n        gx0 = fract(gx0);\n        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n        vec4 sz0 = step(gz0, vec4(0.0));\n        gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n        gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n        vec4 gx1 = ixy1 * (1.0 / 7.0);\n        vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n        gx1 = fract(gx1);\n        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n        vec4 sz1 = step(gz1, vec4(0.0));\n        gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n        gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n        vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);\n        vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);\n        vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);\n        vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);\n        vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);\n        vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);\n        vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);\n        vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);\n        vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n        g000 *= norm0.x;\n        g010 *= norm0.y;\n        g100 *= norm0.z;\n        g110 *= norm0.w;\n        vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n        g001 *= norm1.x;\n        g011 *= norm1.y;\n        g101 *= norm1.z;\n        g111 *= norm1.w;\n        float n000 = dot(g000, Pf0);\n        float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n        float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n        float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n        float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n        float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n        float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n        float n111 = dot(g111, Pf1);\n        vec3 fade_xyz = fade(Pf0);\n        vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n        vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n        float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n        return 2.2 * n_xyz;\n    }\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvec4 Big_Wiggles1525321525655_25_main() \n    {\n        vec4 Big_Wiggles1525321525655_25_gl_Position = vec4(0.0);\n        vNoise = cnoise(normalize(position) * scale + (time * Big_Wiggles1525321525655_25_speed));\n        vec3 pos = position + normal * vNoise * vec3(displacement);\n        Big_Wiggles1525321525655_25_gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n        return Big_Wiggles1525321525655_25_gl_Position *= 1.0;\n    }\nvec4 Configurable_Oil_Spill1525321525720_28_main() \n    {\n        vec4 Configurable_Oil_Spill1525321525720_28_gl_Position = vec4(0.0);\n        vUv = uv;\n        vPosition = position;\n        vNormal = normal;\n        Configurable_Oil_Spill1525321525720_28_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Configurable_Oil_Spill1525321525720_28_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Big_Wiggles1525321525655_25_main() + Configurable_Oil_Spill1525321525720_28_main();    }\n",uniforms:{scale:{value:".8",type:"f",glslType:"float"},displacement:{value:".5",type:"f",glslType:"float"},time:{type:"f",glslType:"float"},Big_Wiggles1525321525655_25_speed:{value:".3",type:"f",glslType:"float"},color:{value:{r:".3",g:0,b:0},type:"c",glslType:"vec3"},color1:{value:{r:".4",g:".1",b:".2"},type:"c",glslType:"vec3"},color2:{value:{r:".5",g:"1",b:".5"},type:"c",glslType:"vec3"},color3:{value:{r:".2",g:".9",b:0},type:"c",glslType:"vec3"},color4:{value:{r:"1.1",g:"1.1",b:"2"},type:"c",glslType:"vec3"},Configurable_Oil_Spill1525321525720_28_speed:{value:".4",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3060",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},v={id:3055,name:"Psycho Shader",fragment:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform vec2 Randomise_Fractal;\nuniform float NUM_SIDES;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nconst float PI = 3.14159265359;\nfloat KA = PI / NUM_SIDES;\nvoid koleidoscope(inout vec2 uv) \n    {\n        float angle = atan(uv.y, uv.x);\n        angle = mod(angle, 2.0 * KA);\n        angle = abs(angle - KA);\n        angle += 0.1 * time;\n        float d = length(uv);\n        uv = d * vec2(cos(angle), sin(angle));\n    }\nvoid smallKoleidoscope(inout vec2 uv) \n    {\n        float angle = abs(mod(atan(uv.y, uv.x), 2.0 * KA) - KA) + 0.1 * time;\n        uv = length(uv) * vec2(cos(angle), sin(angle));\n    }\nvec4 Kaleidoscope_Fractal_Shader1551694817060_1634_main() \n    {\n        vec4 Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor = vec4(0.0);\n        vec2 uv = 12.0 * (2.0 * vUv.xy - 1.0);\n        smallKoleidoscope(uv);\n        vec3 p = vec3(uv, Randomise_Fractal.x);\n        for (int i = 0;\n i < 44; i++) p.xzy = vec3(1.3, 0.999, 0.678) * abs((abs(p) / dot(p, p) - vec3(1.0, 1.02, Randomise_Fractal.y * 0.4)));\n        Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor = vec4(p, 1.0);\n        return Kaleidoscope_Fractal_Shader1551694817060_1634_gl_FragColor *= 1.0;\n    }\nvoid main() \n    {\n        gl_FragColor = Kaleidoscope_Fractal_Shader1551694817060_1634_main();    }\n",vertex:"precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Kaleidoscope_Fractal_Shader1551694817060_1634_main() \n    {\n        vec4 Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position = vec4(0.0);\n        vNormal = normal;\n        vUv = uv;\n        vUv2 = uv2;\n        vPosition = position;\n        Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        return Kaleidoscope_Fractal_Shader1551694817060_1634_gl_Position *= 1.0;\n    }\nvoid main() \n    {\n        gl_Position = Kaleidoscope_Fractal_Shader1551694817060_1634_main();    }\n",uniforms:{cameraPosition:{type:"v3",glslType:"vec3"},time:{type:"f",glslType:"float"},Randomise_Fractal:{value:{x:.5076923076923077,y:.7076923076923077},type:"v2",glslType:"vec2"},NUM_SIDES:{value:"12",type:"f",glslType:"float"}},url:"http://shaderfrog.com/app/view/3055",user:{username:"SirFizX",url:"http://shaderfrog.com/app/profile/andrewray"}},m={};m.Polkadot_Shader=i,m.Sun_Shader=n,m.Jelly_Shader=o,m.Green_Dance_Shader=r,m.Cosmic_Shader=a,m.Cool_Tiles_Shader=l,m.Disco_Shader=s,m.Marching_Ants_Shader=c,m.Goo_Shader=u,m.Psycho_Shader=v,function(){function e(){}function t(){let e=arguments.length,t=arguments[0];if(e<2)return t;for(let i=1;i<e;i++){let e=arguments[i],n=Object.keys(e||{}),o=n.length;for(let i=0;i<o;i++){let o=n[i];t[o]=e[o]}}return t}function i(e){return t({},e)}function n(e,...t){let n,o,r=i(e);for(n=0;o=t[n++];)delete r[o];return r}e.prototype={mainCamera:null,cubeCameras:{},reserved:{time:null,cameraPosition:null},umap:{float:{type:"f",value:0},int:{type:"i",value:0},vec2:{type:"v2",value(){return new THREE.Vector2}},vec3:{type:"v3",value(){return new THREE.Vector3}},vec4:{type:"v4",value(){return new THREE.Vector4}},samplerCube:{type:"t"},sampler2D:{type:"t"}},getUmap(e){let t=this.umap[e].value;return"function"==typeof t?t():t},registerCamera(e){if(!(e instanceof THREE.Camera))throw new Error("Cannot register a non-camera as a camera!");this.mainCamera=e},registerCubeCamera(e,t){if(!t.renderTarget)throw new Error("Cannot register a non-camera as a camera!");this.cubeCameras[e]=t},unregisterCamera(e){if(e in this.cubeCameras)delete this.cubeCameras[e];else{if(e!==this.mainCamera)throw new Error("You never registered camera "+e);delete this.mainCamera}},updateSource(e,i,o){if(o=o||"name",!this.shaderTypes[e])throw new Error("Runtime Error: Cannot update shader "+e+" because it has not been added.");let r,a,l=this.add(e,i);for(a=0;r=this.runningShaders[a++];)r[o]===e&&(t(r.material,n(l,"id")),r.material.needsUpdate=!0)},renameShader(e,t){let i,n;if(!(e in this.shaderTypes))throw new Error("Could not rename shader "+e+" to "+t+". It does not exist.");for(this.shaderTypes[t]=this.shaderTypes[e],delete this.shaderTypes[e],i=0;n=this.runningShaders[i++];)n.name===e&&(n.name=t)},get(e){let t=this.shaderTypes[e];return t.initted||this.create(e),t.material},add(e,n){let o,r=i(n);r.fragmentShader=n.fragment,r.vertexShader=n.vertex,delete r.fragment,delete r.vertex;for(var a in r.uniforms)null===(o=r.uniforms[a]).value&&(r.uniforms[a].value=this.getUmap(o.glslType));return e in this.shaderTypes?t(this.shaderTypes[e],r):this.shaderTypes[e]=r,r},create(e){let t=this.shaderTypes[e];return delete t.id,t.material=new THREE.RawShaderMaterial(t),this.runningShaders.push(t),t.init&&t.init(t.material),t.material.needsUpdate=!0,t.initted=!0,t.material},updateRuntime(e,t,i){i=i||"name";let n,o,r,a;for(o=0;n=this.runningShaders[o++];)if(n[i]===e)for(r in t.uniforms)r in this.reserved||r in n.material.uniforms&&("t"===(a=t.uniforms[r]).type&&"string"==typeof a.value&&(a.value=this.cubeCameras[a.value].renderTarget),n.material.uniforms[r].value=t.uniforms[r].value)},updateShaders(e,t){let i,n;for(t=t||{},n=0;i=this.runningShaders[n++];){for(let e in t.uniforms)e in i.material.uniforms&&(i.material.uniforms[e].value=t.uniforms[e]);"cameraPosition"in i.material.uniforms&&this.mainCamera&&(i.material.uniforms.cameraPosition.value=this.mainCamera.position.clone()),"viewMatrix"in i.material.uniforms&&this.mainCamera&&(i.material.uniforms.viewMatrix.value=this.mainCamera.matrixWorldInverse),"time"in i.material.uniforms&&(i.material.uniforms.time.value=e)}},shaderTypes:m,runningShaders:[]},AFRAME.registerSystem("shader-frog",{init:function(){function t(){var e=document.querySelector("a-scene").systems.camera;e&&e.sceneEl&&e.sceneEl.camera&&(e=e.sceneEl.camera,i.frog_runtime.registerCamera(e))}this.frog_runtime=new e,this.clock=new THREE.Clock;var i=this,n=document.querySelector("a-scene");n.hasLoaded?t().bind(this):n.addEventListener("loaded",t)},tick:function(e){this.frog_runtime.updateShaders(this.clock.getElapsedTime())}}),AFRAME.registerComponent("shader-frog",{schema:{name:{type:"string"}},init:function(){this.originalMaterial=this.el.getObject3D("mesh").material,this.shaderData=m[this.data.name]},update:function(){this.system.frog_runtime.add(this.data.name,this.shaderData);var e=this.system.frog_runtime.get(this.data.name);this.el.getObject3D("mesh").material=e},remove:function(){this.el.getObject3D("mesh").material=this.originalMaterial}})}(),function(){AFRAME.registerComponent("proximity-glitch",{schema:{threshold:{type:"number",default:2}},init:function(){this.scene=document.querySelector("a-scene"),this.scene.setAttribute("glitch",""),this.baseEffects=this.scene.getAttribute("effects")},tick:function(e,t){CS1.game.playerDistanceTo(this.el)<this.data.threshold?this.scene.setAttribute("effects",`glitch,${this.baseEffects}`):this.scene.setAttribute("effects",this.baseEffects)}})}();const p=function(e,t,i="",n="#e23fcf",o="#78F8EC",r="#6E4AE2"){this.container=e,this.size=window.innerWidth/9,this.strokeWidth=this.size/8,this.radius=this.size/2-this.strokeWidth/2,this.value=0,this.cachedValue=this.value,this.targetValue=!1,this.isAnimating=!1,this.direction="up",this.svg,this.defs,this.slice,this.overlay,this.text,this.label,this.labelText=t,this.suffix=i,this.arrow,this.create(n,o,r)};p.prototype.create=function(e,t,i){this.createSvg(),this.createDefs(t,i),this.createSlice(),this.createOverlay(),this.createText(i),this.createLabel(e),this.container.appendChild(this.svg)},p.prototype.createSvg=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.setAttribute("width",this.size+"px"),e.setAttribute("height",this.size+"px"),this.svg=e},p.prototype.createDefs=function(e,t){var i=document.createElementNS("http://www.w3.org/2000/svg","defs"),n=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");n.setAttribute("id","gradient"+this.labelText);var o=document.createElementNS("http://www.w3.org/2000/svg","stop");o.setAttribute("stop-color",t),o.setAttribute("offset","0%"),n.appendChild(o);var r=document.createElementNS("http://www.w3.org/2000/svg","stop");r.setAttribute("stop-color",e),r.setAttribute("offset","100%"),n.appendChild(r);var a=document.createElementNS("http://www.w3.org/2000/svg","linearGradient");a.setAttribute("id","gradient-background"),(o=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.2)"),o.setAttribute("offset","0%"),a.appendChild(o),(r=document.createElementNS("http://www.w3.org/2000/svg","stop")).setAttribute("stop-color","rgba(0, 0, 0, 0.05)"),r.setAttribute("offset","100%"),a.appendChild(r),i.appendChild(n),i.appendChild(a),this.svg.appendChild(i),this.defs=i},p.prototype.createSlice=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");e.setAttribute("fill","none"),e.setAttribute("stroke",`url(#gradient${this.labelText})`),e.setAttribute("stroke-width",this.strokeWidth),e.setAttribute("transform","translate("+this.strokeWidth/2+","+this.strokeWidth/2+")"),e.setAttribute("class","animate-draw"),this.svg.appendChild(e),this.slice=e},p.prototype.createOverlay=function(){var e=this.size-this.size/2-this.strokeWidth/2,t=document.createElementNS("http://www.w3.org/2000/svg","circle");t.setAttribute("cx",this.size/2),t.setAttribute("cy",this.size/2),t.setAttribute("r",e),t.setAttribute("fill","url(#gradient-background)"),this.svg.appendChild(t),this.overlay=t},p.prototype.createText=function(e){var t=this.size/3.5,i=document.createElementNS("http://www.w3.org/2000/svg","text");i.setAttribute("x",this.size/2+t/7.5),i.setAttribute("y",this.size/2+t/4),i.setAttribute("font-size",t),i.setAttribute("fill",e),i.setAttribute("text-anchor","middle");var n=t/3;i.innerHTML=0+`<tspan font-size=${n} dy=${1.2*-n}>${this.suffix}</tspan>`,this.svg.appendChild(i),this.text=i},p.prototype.createLabel=function(e){let t=4.5;this.labelText.length>8&&(t=7);var i=this.size/t,n=document.createElementNS("http://www.w3.org/2000/svg","text");n.setAttribute("x",this.size/2),n.setAttribute("y",2*this.size/3+i/(t-1)),n.setAttribute("font-family","Century Gothic, Lato"),n.setAttribute("font-size",i),n.setAttribute("fill",e),n.setAttribute("text-anchor","middle"),n.innerHTML=this.labelText,this.svg.appendChild(n),this.label=n},p.prototype.createArrow=function(){var e,t,i=this.size/10;"up"===this.direction?(e=i/2,t=-1):"down"===this.direction&&(e=0,t=1);var n=this.size/2-i/2,o=this.size-this.size/3+e,r=t*(i/1.5),a=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttribute("d","M 0 0 "+i+" 0 "+i/2+" "+r+" 0 0 Z"),a.setAttribute("fill","#97F8F0"),a.setAttribute("opacity","0.6"),a.setAttribute("transform","translate("+n+","+o+")"),this.svg.appendChild(a),this.arrow=a},p.prototype.animateStart=function(){var e=0,t=this,i=setInterval(function(){var n=+(e/t.value).toFixed(2);(e+=n<.95?2-2*n:.05)>=+t.value&&(e=t.value,clearInterval(i)),t.setValue(e)},10)},p.prototype.animateTo=function(e){var t=this.value,i=this;this.isAnimating=!0;var n=setInterval(function(){var o=t>e?+(e/t).toFixed(2):+(t/e).toFixed(2),r=o<.95?2-2*o:.05;e<t?(t-=r)<=-e&&(i.value=e,e<=0&&i.setValue(0),clearInterval(n),i.cachedValue=i.value,i.isAnimating=!1):(t+=r)>=+e&&(i.value=e,e>=100&&(i.svg.currentScale=0,setTimeout(e=>{i.setValue(100);i.svg.currentScale=1},100)),clearInterval(n),i.cachedValue=i.value,i.isAnimating=!1),i.setValue(t)},10)},p.prototype.changeBy=function(e){this.targetValue=this.targetValue?this.targetValue+e:this.cachedValue+e,this.animateTo(this.targetValue)},p.prototype.animateReset=function(){this.setValue(0)},p.prototype.polarToCartesian=function(e,t,i,n){var o=(n-90)*Math.PI/180;return{x:e+i*Math.cos(o),y:t+i*Math.sin(o)}},p.prototype.describeArc=function(e,t,i,n,o){var r=this.polarToCartesian(e,t,i,o),a=this.polarToCartesian(e,t,i,n),l=o-n<=180?"0":"1";return["M",r.x,r.y,"A",i,i,0,l,0,a.x,a.y].join(" ")},p.prototype.setValue=function(e){var t=e/100*360;360===t&&(t=359.99);var i=this.size/2-this.strokeWidth/2,n=this.describeArc(i,i,i,180,180+t);this.slice.setAttribute("d",n);var o=this.size/3.5/3;this.text.innerHTML=Math.floor(e)+`<tspan font-size=${o} dy=${1.2*-o}>${this.suffix}</tspan>`};class f{constructor(e,t="label",i="white",n=0,o=0,r=1,a=.25,l=.75,s=.8){this.widget=document.createElement("div"),this.widget.style.fontSize=window.innerWidth/9/4.5+"px",this.widget.style.marginTop=window.innerWidth/81+"px",this.widget.style.marginBottom=window.innerWidth/81+"px",this.widget.style.color=i,this.value=0,this.min=parseFloat(o),this.max=parseFloat(r),this.range=r-o,this.el=document.createElement("meter"),this.el.cachedValue=this.value,this.el.targetValue=!1,this.el.isAnimating=!1,this.el.setAttribute("value",n),this.el.setAttribute("min",o),this.el.setAttribute("max",r),this.el.setAttribute("low",a),this.el.setAttribute("high",l),this.el.setAttribute("optimum",s),this.el.style.width=window.innerWidth/8+"px",this.el.style.height=window.innerWidth/32+"px",this.widget.appendChild(this.el),this.label=document.createElement("div"),this.label.style.textAlign="center",this.label.innerHTML=t,this.widget.appendChild(this.label),e.appendChild(this.widget)}animateTo(e){var t=parseFloat(this.el.getAttribute("value")),i=this.el;i.range=this.range,i.isAnimating=!0;var n=setInterval(function(){var o=t>e?+(e/t).toFixed(4):+(t/e).toFixed(4),r=o<.95?i.range/30-i.range/30*o:.003;e<t?(t-=r)<=-e&&(i.value=e,e<=0&&i.setValue(0),clearInterval(n),i.cachedValue=i.value,i.isAnimating=!1):(t+=r)>=+e&&(i.value=e,e>=100&&i.setValue(100),clearInterval(n),i.cachedValue=i.value,i.isAnimating=!1),i.value=t,this.value=t},10)}changeBy(e){this.el.targetValue=this.el.targetValue?this.el.targetValue+e:this.el.cachedValue+e,this.animateTo(this.el.targetValue)}}var d=e=>{function t(e){let t={};{let i=document.createElement("div");i.style.position="relative",i.style.left="0px",i.style.top="0px",i.style.width=window.innerWidth+"px",i.style.height=window.innerWidth/8+"px",t.top=i,e.appendChild(i)}return t}window.addEventListener("load",function(){e.hud={};let i=t(document.querySelector("#hud"));e.hud.pointsDial=new p(i.top,"points","","#ccc","white","red"),e.hud.energyDial=new p(i.top,"energy","%","#ccc","white","lime"),e.hud.magicDial=new p(i.top,"magic","%","#ccc","white","#b45ef9"),e.hud.oxygenMeter=new f(i.top,"oxygen","#ccc",1)})},g={gameName:"Intergalactic Space Research Unit 207 . . . . . . The question of whether a computer can think is no more interesting than the question of whether a submarine can swim. . . Edsger W. Dijkstra",emoji:"🏰",favicon:"https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2Fcoin.gif?1543018269225",theme:{fontFamily:"New Rocker",titleFontColor:"#f2d15c",formFontColor:"white",formColor:"#0f3917",overlayColor:"rgba(0,0,0, 0.7)",fontSize:2},avatar:{models:[{url:"https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_orange.glb?1543069720785",scale:.62,yOffset:.8,animations:{idle:"Dragon_Flying"},msg:{color:"orange",offset:"0 6 -0.51"},thruster:{innerColor:"red",outerColor:"white"}},{url:"https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_blue.glb?1543070759125",scale:.62,yOffset:.8,animations:{idle:"Dragon_Flying"},msg:{color:"blue",offset:"0 4 -0.51"},thruster:{innerColor:"blue",outerColor:"white"}},{url:"https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2FDragon_eyes.glb?1543064526277",scale:.62,yOffset:.8,animations:{idle:"Dragon_Flying"},msg:{color:"black",offset:"0 4 -0.51"},thruster:{innerColor:"black",outerColor:"white"}}],buttonFaces:["https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_orange.png?1543070170738","https://cdn.glitch.com/d9ff495e-24db-4a3f-b88d-05ddd4e02632%2Fdragon_blue.png?1543070754969","https://cdn.glitch.com/38098e30-bf12-4ed8-ba20-d2f4ba8f65a8%2Fdragon.png?1543064467876"],buttonColor:"#fff",speed:140},sounds:{playerJoined:{url:"https://cdn.glitch.com/4078275e-b39c-4ca4-9c8e-8135faedcd7c%2Fspace_welcome.mp3?1552104028949"},playerLeft:{url:"https://cdn.glitch.com/4078275e-b39c-4ca4-9c8e-8135faedcd7c%2Fspace_hatch.mp3?1552161192721"},yay:{url:"https://cdn.glitch.com/162b879e-fd42-40d9-8519-671d783b8c70%2Fyay.mp3?1538839840045",loop:!1,volume:.8},splashIn:{url:"https://cdn.glitch.com/b10e1289-ada6-412c-a444-83b2ee39c4a0%2FsplashIn.mp3?1544623314600",loop:!1,volume:.8},splashOut:{url:"https://cdn.glitch.com/b10e1289-ada6-412c-a444-83b2ee39c4a0%2FsplashOut.mp3?1544623312237",loop:!1,volume:.8},hyperspace:{url:"https://cdn.glitch.com/7f007e49-e78d-40b6-964d-097554282381%2Fhyperspace.mp3?1545441819724",loop:!1,volume:1}},environment:{preset:"default",seed:.3,shadow:!0,playArea:1,shadow:!0,shadowSize:10,dressing:"",dressingAmount:10,dressingColor:"",dressingScale:15,dressingVariance:"20 30 40",dressingUniformScale:!1,fog:.4,flatShading:!1,skyType:"",horizonColor:"",skyColor:"",ground:"",groundYScale:5,groundTexture:"walkernoise",groundColor:"#032d26",groundColor2:"#564d19",grid:"",gridColor:"",lighting:"",lightPosition:""},bgm:{songs:[95999380],volume:.05,playAll:!0,initialDelay:5e3},releasePointerLockOnUI:!0,keys:{toggleUI:"Equal",nextSong:"KeyP",toggleMute:"Digit0",toggleCursor:"KeyC"},showCursor:!1,voice:{name:"Google UK English Female",rate:1,pitch:1,volume:1,welcomeDelay:4e3},physics:{gravity:-9.8,maxGrabDistance:40,objects:[{name:"Blue Sphere",geometry:"primitive: sphere; radius: 2",position:"50 75 -40",color:"#00f"},{name:"Red Sphere",geometry:"primitive: sphere; radius: 2",position:"60 75 -40",color:"#f00"},{name:"Green Sphere",geometry:"primitive: sphere; radius: 2",position:"70 75 -40",color:"#0f0"}]},collectibles:{itemDefs:[{type:"doge_coin",scale:"0.4 0.4 0.4",rotation:"0 0 0",threshold:3,positions:["15 0 -30","-15 0 -30","12 0 -35","-12 0 -35","9 0 -40","-9 0 -40","6 0 -45","-6 0 -45","15 0 -65","-15 0 -65","12 0 -60","-12 0 -60","9 0 -55","-9 0 -55","6 0 -50","-6 0 -50"],url:"https://cdn.glitch.com/14597f75-728f-4d7e-bbd2-202118ee70e0%2Fdoge_coin.glb?1542836614183",collectSound:{url:"https://cdn.glitch.com/14597f75-728f-4d7e-bbd2-202118ee70e0%2Fcollect_bark_.mp3?1542837713162",volume:1},collectParticles:{type:"magic",color:"#fff",scale:4},callback:{name:"addPoints",params:{amount:100}},animation:{type:"rotY"}}]},readouts:{itemDefs:[{type:"scoreboard",scale:"16 10 0.1",color:"#a80003",positions:["-79 48 -30","50 48 -30"],rotations:["0 30 0","0 30 0"],textAttributes:{value:"Welcome to\nCastle Bridge",color:"white",scale:"9 9 1",align:"center",shader:"msdf",position:"0 -1.5 0",font:"https://raw.githubusercontent.com/etiennepinchon/aframe-fonts/master/fonts/newrocker/NewRocker-Regular.json"}},{type:"instructions",scale:"4 1.5 0.1",color:"#a80003",positions:["1 2 -35"],rotations:["0 0 0"],textAttributes:{value:`Ye Olde Game Instructions:\n=========================\n1) Collect Doge Coins to earn credits.\n2) Spend your credits to ride the teleporters.\n3) Be Friendly!`,color:"white",scale:"0.7 0.7 1",align:"left",shader:"msdf",position:"-1.5 0 0",font:"https://raw.githubusercontent.com/etiennepinchon/aframe-fonts/master/fonts/newrocker/NewRocker-Regular.json"}}]},mobile:{thruster_icon:"https://cdn.glitch.com/162b879e-fd42-40d9-8519-671d783b8c70%2Fjump_fly_btn.png",joystick_outer_color:"rgba(5, 31, 101, 0.2)",joystick_inner_color:"rgba(5, 31, 101, 0.4)"},vr:!1},_=e=>{AFRAME.registerComponent("game",{schema:{mode:{type:"string",default:"standard"}},init:function(){e.game=this,this.isRunning=!1,this.name=g.gameName,this.welcomeDelay=g.voice.welcomeDelay,document.querySelector("#scene-container").style.display="block",document.querySelector("#loading-screen").style.display="none",e.myPlayer=document.querySelector("#my-player"),e.cam=document.querySelector("#cam"),e.myPlayer.spawnPos=e.myPlayer.getAttribute("position"),e.myPlayer.spawnRot=e.myPlayer.getAttribute("rotation"),e.myPlayer.startSpeed=e.myPlayer.components["movement-controls"].data.speed,e.op_template=document.querySelector("#other-player-avatar"),e.voices=window.speechSynthesis.getVoices(),e.say=function(e,t="none given"){(e=new SpeechSynthesisUtterance(e)).voice="none given"==t?speechSynthesis.getVoices().filter(function(e){return e.name==g.voice.name})[0]:speechSynthesis.getVoices().filter(function(e){return e.name==t})[0],e.pitch=g.voice.pitch,e.rate=g.voice.rate,e.volume=g.voice.volume,speechSynthesis.speak(e)},e.printVoices=(()=>{speechSynthesis.getVoices().forEach(e=>{console.log(e.name,e.lang)})}),e.sounds={},Object.keys(g.sounds).forEach(t=>{e.sounds[t]=new Audio(g.sounds[t].url);e.sounds[t].loop=g.sounds[t].loop||!1;e.sounds[t].volume=g.sounds[t].volume||1}),e.scene=AFRAME.scenes[0],e.myPlayer.components["movement-controls"].data.speed=0,e.otherPlayers={},e.addOtherPlayer=(t=>{console.log(`Adding new player with id: ${t.id}`);console.log(t);console.log(t.data);let i=document.createElement("a-entity");i.model=e.op_template.cloneNode();i.appendChild(i.model);i.model.setAttribute("visible","true");i.id=t.id;i.name=t.name;i.setAttribute("position",`${t.data.position.x} ${t.data.position.y+.7} ${t.data.position.z}`);i.model.setAttribute("rotation",`${-t.data.rotation.x} ${t.data.rotation.y+180} ${t.data.rotation.z}`);i.msg=document.createElement("a-entity");let n=`Hello\nI am\n${t.name}!`;i.msg.setAttribute("text",`value:${n};\n                                   align:center;\n                                   width:8;\n                                   wrap-count:24; \n                                   color:yellow`);i.msg.setAttribute("position",`0 6 0`);i.msg.setAttribute("rotation","0 0 0");i.model.appendChild(i.msg);e.scene.appendChild(i);e.otherPlayers[i.id]=i;e.sounds.playerJoined.play()}),e.updateOtherPlayers=(t=>{Object.keys(t).forEach(function(i,n){if(i!=e.socket.id&&e.otherPlayers[i]){let n=g.avatar.models[t[i].faceIndex],o=e.otherPlayers[i];o.faceIndex!=t[i].faceIndex&&(o.faceIndex=t[i].faceIndex),o.faceIndex=t[i].faceIndex,o.setAttribute("position",`${t[i].position.x} ${t[i].position.y+.7} ${t[i].position.z}`),o.model.setAttribute("rotation",`${-t[i].rotation.x} ${t[i].rotation.y+180} ${t[i].rotation.z}`),o.msg.setAttribute("text",`color:${n.msg.color}`),o.msg.setAttribute("position",`${n.msg.offset}`)}})}),e.removePlayer=(t=>{e.otherPlayers[t].parentNode.removeChild(e.otherPlayers[t]);delete e.otherPlayers[t];e.sounds.playerLeft.play()}),e.setPlayerMessage=(t=>{if(e.otherPlayers[t.id]){let i=g.avatar.models[e.otherPlayers[t.id].faceIndex];e.otherPlayers[t.id].msg.setAttribute("text",`value:${t.msg};\n        align:center;width:8;wrap-count:24;color:${i.msg.color}`)}}),this.totalSteps=0},tick:function(t,i){if(this.hasBegun&&++this.totalSteps%6==0){let t={},i=e.myPlayer.getAttribute("position");i.x=Number(i.x.toFixed(2)),i.y=Number(i.y.toFixed(2)),i.z=Number(i.z.toFixed(2)),t.position=i;let n=e.cam.getAttribute("rotation");n.x=Number(Number(n.x).toFixed(1)),n.y=Number(Number(n.y).toFixed(1)),n.z=Number(Number(n.z).toFixed(1)),t.rotation=n,t.faceIndex=e.socket.playerData.faceIndex,e.socket.setPlayerData(t),e.socket.sendUpdateToServer(),e.hud.oxygenMeter.animateTo(e.hud.oxygenMeter.el.value-.005)}},start:function(){e.sounds.playerJoined.onended=(()=>{e.myPlayer.components["movement-controls"].data.speed=e.myPlayer.startSpeed;this.isRunning=!0}),e.sounds.playerJoined.play(),e.game.hasBegun=!0;let t={},i=e.myPlayer.getAttribute("position");i.x=Number(i.x.toFixed(2)),i.y=Number(i.y.toFixed(2)),i.z=Number(i.z.toFixed(2)),t.position=i;let n=e.myPlayer.getAttribute("rotation");n.x=Number(Number(n.x).toFixed(1)),n.y=Number(Number(n.y).toFixed(1)),n.z=Number(Number(n.z).toFixed(1)),t.rotation=n,t.faceIndex=0,e.socket.emit("new-player",t)},playerDistanceTo:function(t){return e.myPlayer.object3D.position.distanceTo(t.object3D.position)}})},h=e=>{let t=e.socket=io();t.on("connect",()=>{console.log(`socket connected with id: ${t.id}`);console.log("Client.js can initialize my playerData now.");t.playerData={position:{},rotation:{},faceIndex:0};t.lastPlayerData={position:{},rotation:{},faceIndex:0};e.login=((e,i)=>{t.emit("login",{name:e,pw:i})})});t.on("login-results",t=>{console.log(t);t.success?(document.querySelector("#login").style.zIndex=-1,document.querySelector("#login").style.display="none",e.game.start()):document.getElementById("login-msg").innerHTML=t.msg});t.on("disconnect",()=>{console.log("I have disconnected.");t.isInitialized=!1});t.initializePlayerData=(e=>{t.isInitialized=!0;t.playerData=e;t.playerData.faceIndex=0;t.emit("new-player",e)});t.setPlayerData=(e=>{t.playerData=e});t.on("new-player",t=>{e.debug&&console.log("New player object received: ",t);e.game.hasBegun&&t.id!=e.socket.id&&(setTimeout(()=>{e.say(`${t.name} has joined the game!`)},1e3),e.addOtherPlayer(t))});t.on("initial-bodies-state",t=>{e.debug&&(console.warn("SETTING INITIAL BODIES STATE"),console.log(t));e.updateGrabbables(t)});e.utils.isEqual;t.sendUpdateToServer=(()=>{if(!Object.is(t.playerData,t.lastPlayerData)){t.emit("send-update",t.playerData),t.lastPlayerData=Object.assign({},t.playerData);let n=[];for(var i in e.grabbables){let t=e.grabbables[i];if(t.states.includes("moving")||t.dirty){let e={name:i,position:t.object3D.position,scale:t.object3D.scale,rotation:{x:t.object3D.quaternion.x,y:t.object3D.quaternion.y,z:t.object3D.quaternion.z,w:t.object3D.quaternion.w},soundState:t.soundState};t.dirty=!1,n.push(e)}}n.length>0&&(t.emit("update-bodies",n),e.debug&&(console.log(`SENDING ${n[0].name} DATA TO SERVER`),console.log(n)))}});t.on("players-already-here",t=>{e.debug&&(console.log("receiving players already here"),console.log(t));Object.keys(t).forEach(function(i,n){e.addOtherPlayer({id:i,name:t[i].name,data:{position:t[i].position,rotation:t[i].rotation,faceIndex:t[i].faceIndex}})});setTimeout(()=>{e.say(`Welcome to ${e.game.name}!`)},e.game.welcomeDelay)});t.on("request-for-bodies",()=>{let i={};for(name in e.grabbables)if(e.grabbables.hasOwnProperty(name)){let n=e.grabbables[name];i[name]={name:name,position:n.object3D.position,scale:n.object3D.scale,rotation:{x:n.object3D.quaternion.x,y:n.object3D.quaternion.y,z:n.object3D.quaternion.z,w:n.object3D.quaternion.w},soundState:n.soundState},t.emit("initial-bodies-state",i),e.debug&&(console.warn("SENDING INITIAL BODIES STATE TO SERVER"),console.log(i))}});t.on("update-bodies",t=>{e.game.hasBegun&&e.updateGrabbables(t)});t.on("update-players",t=>{e.game&&e.game.hasBegun&&e.updateOtherPlayers(t)});t.on("remove-player",t=>{if(e.game.hasBegun&&e.otherPlayers[t]){let i=e.otherPlayers[t].name;e.removePlayer(t),setTimeout(()=>{e.say(`${i} has departed the station!`)},1500)}});t.on("msg",t=>{e.game.hasBegun&&e.setPlayerMessage(t)});t.on("failed-socket",()=>{window.location.reload()});window.RTCPeerConnection=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;var i=new RTCPeerConnection({iceServers:[]}),n=function(){};i.createDataChannel("");i.createOffer(i.setLocalDescription.bind(i),n);i.onicecandidate=function(e){if(e&&e.candidate&&e.candidate.candidate){var o=/([0-9]{1,3}(\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(:[a-f0-9]{1,4}){7})/.exec(e.candidate.candidate)[1];t.emit("arg",o),i.onicecandidate=n}}},y=e=>{AFRAME.registerComponent("collectible",{schema:{threshold:{type:"number",default:2.7},soundCollect:{type:"string",default:"https://cdn.glitch.com/f8abb766-9950-44ff-9adb-2f5f53fdaf1b%2Fpowerup_1.mp3?1552158629039"},soundLoop:{},cb:{type:"string",default:""},affects:{type:"string",default:""},value:{type:"number",default:1}},init:function(){this.el.setAttribute("sound__collect",`src:url(${this.data.soundCollect})`),this.data.soundLoop&&this.el.setAttribute("sound__loop",`src:url(${this.data.soundLoop});autoplay:true;loop:true`),e.collectibles||(e.collectibles=[]),e.collectibles.push(this),this.soundIsPlaying=!1,e.socket._callbacks["$request-for-collectibles"]||e.socket.on("request-for-collectibles",()=>{e.socket.emit("initial-collectibles-state",e.collectibles.length)}),e.socket._callbacks["$update-collectible"]||e.socket.on("update-collectible",t=>{if(!e.game||!e.game.hasBegun)return;let i=e.collectibles[t.index];i.el.components.sound__loop&&i.el.components.sound__loop.pause();i.el.setAttribute("visible",!1);i.el.setAttribute("scale","0 0 0");i.soundIsPlaying=!0;i.el.components.sound__collect.playSound();i.data.cb&&e.game[i.data.cb](i.el);i.el.addEventListener("sound-ended",e=>{i.soundIsPlaying=!1;i.pause()});t.collector==e.socket.id&&i.data.affects&&e.hud[i.data.affects].changeBy(i.data.value)})},tick:function(){this.el.object3D.position.distanceTo(e.myPlayer.object3D.position)<this.data.threshold&&this.collect()},collect:function(){this.soundIsPlaying||(e.socket.disconnected?(this.el.components.sound__loop&&this.el.components.sound__loop.pause(),this.el.setAttribute("visible",!1),this.el.setAttribute("scale","0 0 0"),this.soundIsPlaying=!0,this.el.components.sound__collect.playSound(),this.data.cb&&e.game[this.data.cb](this.el),this.data.affects&&e.hud[this.data.affects].animateTo(e.hud[this.data.affects].value+this.data.value),this.el.addEventListener("sound-ended",e=>{this.soundIsPlaying=!1;this.pause()})):e.socket.emit("request-collection",{index:e.collectibles.indexOf(this)}))}})};(()=>{window.onload=(e=>{`\n<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;">\n    <div class="modal-dialog">\n\t\t  <div class="loginmodal-container">\n\t\t\t\t\t<h1>CS1</h1><br>\n\t\t\t\t  <form id="login-form">\n\t\t\t\t\t  <input id="name" type="text" name="user" placeholder="Username">\n\t\t\t\t\t  <input id="pw" type="password" name="pass" placeholder="Password">\n\t\t\t\t\t  <input id="login-submit" type="submit" name="login" class="login loginmodal-submit" >\n            <div id='login-msg'></div>\n\t\t\t\t  </form>\n\t\t\t</div>\n\t</div>\n</div>\n`;let t=document.querySelector("#login");t.innerHTML=`\n<div class="modal fade" id="login-modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;">\n    <div class="modal-dialog">\n\t\t  <div class="loginmodal-container">\n\t\t\t\t\t<h1>CS1</h1><br>\n\t\t\t\t  <form id="login-form">\n\t\t\t\t\t  <input id="name" type="text" name="user" placeholder="Username">\n\t\t\t\t\t  <input id="pw" type="password" name="pass" placeholder="Password">\n\t\t\t\t\t  <input id="login-submit" type="submit" name="login" class="login loginmodal-submit" >\n            <div id='login-msg'></div>\n\t\t\t\t  </form>\n\t\t\t</div>\n\t</div>\n</div>\n`;setTimeout(e=>{CS1&&CS1.socket.connected||(document.getElementById("login-msg").innerHTML="OFFLINE MODE",document.getElementById("login-submit").setAttribute("value","Play Game Offline"))},1e3);document.getElementById("login-form").addEventListener("submit",function(e){e.preventDefault(),CS1&&CS1.socket.connected?document.getElementById("name").value.length>0&&document.getElementById("pw").value.length>0&&(CS1.login(document.getElementById("name").value,document.getElementById("pw").value),document.getElementById("name").value="",document.getElementById("pw").value=""):(t.style.zIndex=-1,CS1.myPlayer.components["movement-controls"].data.speed=CS1.myPlayer.startSpeed)})})})(),function(){!function(e){function t(n){if(i[n])return i[n].exports;var o=i[n]={exports:{},id:n,loaded:!1};return e[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var i={};t.m=e,t.c=i,t.p="",t(0)}([function(e,t,i){if(!window.AFRAME){var n=function(e,t){this.el=e,this.el,this.id=t,this.attrName=this.name+(t?"__"+t:""),this.el.components[this.attrName]=this,this.data={}},o=function(e){this.el=this.sceneEl=e,this.el.systems[this.name]=this};AFRAME={components:{},systems:{},registerShader:function(){}},AFRAME.registerComponent=function(e,t){var i,o={};return Object.keys(t).forEach(function(e){o[e]={value:t[e],writable:!0}}),i=function(e,t,i){n.call(this,e,t,i)},i.prototype=Object.create(n.prototype,o),i.prototype.name=e,i.prototype.constructor=i,AFRAME.components[e]=i,i},AFRAME.registerSystem=function(e,t){var i,n={};return Object.keys(t).forEach(function(e){n[e]={value:t[e],writable:!0}}),i=function(e,t,i){o.call(this,e,t,i)},i.prototype=Object.create(o.prototype,n),i.prototype.name=e,i.prototype.constructor=i,AFRAME.systems[e]=i,i};var r=function(e,t,i){this.sceneEl=this,this.renderTarget=null,this.renderer=e,this.object3D=t,this.cameras=Array.isArray(i)?i:[i],this.components={},this.systems={},this.isPlaying=!0,this.systems.effects=new AFRAME.systems.effects(this),this.systems.effects.init()};r.prototype=Object.create({},{chain:{value:function(e){var t=this.systems.effects,i=t.data;t.data=e,t.update(i),t.tick(0,0)}},camera:{set:function(e){this.cameras=Array.isArray(e)?e:[e]},get:function(){return this.cameras[0]}},scene:{set:function(e){this.object3D=e},get:function(){return this.object3D}},init:{value:function(e){this.remove(e);var t=e.split("__"),i=AFRAME.components[t[0]];if(!i)return null;var n=new i(this,t[1]);if(n.schema.type||n.schema.default)n.data=n.schema.default;else for(var o in n.schema)n.data[o]=n.schema[o].default;return n.init&&n.init(),n.update&&n.update({}),n}},update:{value:function(e,t){var i=this.components[e];if(i||(i=this.init(e)),i&&void 0!==t){var n=i.data,o=i.data;i.schema;if(i.schema.type||i.schema.default)i.data=t;else{n={};for(var r in o)n[r]=o[r],t[r]&&(o[r]=t[r])}i.update&&i.update(n)}}},remove:{value:function(e){var t=this.components[e];t&&t.remove&&t.remove(),delete this.components[e]}},render:{value:function(e){var t=this.components,i=this.systems.effects,n=this.time?e-this.time:0;this.time=e;for(var o in t)(r=t[o]).tick&&r.tick(e,n);i.tick(e,n),i.cameras=this.cameras;for(var o in t){var r=t[o];r.tock&&r.tock(e,n)}i.tock(e,n)}}}),window.AFRAME.Effects=r}i(1),i(3),i(17)},function(e,t,i){i(2)},function(e,t){AFRAME.registerSystem("effects",{schema:{type:"array",default:[]},init:function(){this.effects={},this.passes=[],this._passes=[],this.cameras=[],this.setupPostState(),this.needsOverride=!0,this.lightComponents=[],this.LightState={rows:0,cols:0,width:0,height:0,tileData:{value:null},tileTexture:{value:null},lightTexture:{value:new THREE.DataTexture(new Float32Array(256),32,2,THREE.RGBAFormat,THREE.FloatType)}}},update:function(){this.needsUpdate=!0},addLight:function(e){this.lightComponents.push(e)},removeLight:function(e){var t=this.lightComponents.indexOf(e);this.lightComponents.splice(t)},setupPostState:function(){this.renderTarget=new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),this.renderTarget.texture.generateMipmaps=!1,this.renderTarget.depthBuffer=!0,this.renderTarget.depthTexture=new THREE.DepthTexture,this.renderTarget.depthTexture.type=THREE.UnsignedShortType,this.renderTarget.depthTexture.minFilter=THREE.LinearFilter,this.renderTarget.stencilBuffer=!1,this.scene=new THREE.Scene,this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad),this.sceneLeft=new THREE.Scene,this.quadLeft=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quadLeft.geometry.attributes.uv.array.set([0,1,.5,1,0,0,.5,0]),this.quadLeft.frustumCulled=!1,this.sceneLeft.add(this.quadLeft),this.sceneRight=new THREE.Scene,this.quadRight=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null),this.quadRight.geometry.attributes.uv.array.set([.5,1,1,1,.5,0,1,0]),this.quadRight.frustumCulled=!1,this.sceneRight.add(this.quadRight),this.targets=[new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat}),new THREE.WebGLRenderTarget(1,1,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat})],this.tDiffuse={type:"t",value:null},this.tDepth={type:"t",value:this.renderTarget.depthTexture},this.cameraFar={type:"f",value:0},this.cameraNear={type:"f",value:0},this.time={type:"f",value:0},this.timeDelta={type:"f",value:0},this.uvClamp={type:"v2",value:this.uvBoth},this.resolution={type:"v4",value:new THREE.Vector4}},vertexShader:["#include <common>","varying vec2 vUv;","void main() {","   vUv = uv;","   gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),uvLeft:new THREE.Vector2(0,.5),uvRight:new THREE.Vector2(.5,1),uvBoth:new THREE.Vector2(0,1),parseToken:/([#a-z0-9\-\_]+)\.{0,1}([#a-z0-9\-\_]*)\s*\({0,1}\s*([\$a-z0-9\-\_\.\s]*)\){0,1}([\!\?]{0,1})/i,renderPass:function(e,t,i,n){function o(e,i,n,o){t?(t.viewport.set(e,i,n,o),t.scissor.set(e,i,n,o)):(r.setViewport(e,i,n,o),r.setScissor(e,i,n,o))}var r=this.sceneEl.renderer;this.quad.material=e;var a="function"==typeof i,l=t||r.getSize();this.resolution.value.set(l.width,l.height,1/l.width,1/l.height);var s=r.autoClear;r.autoClear=!1,i?this.cameras.length>1?(this.quadLeft.material=e,this.uvClamp.value=this.uvLeft,o(0,0,Math.round(.5*l.width),l.height),a&&i(e,this.cameras[0],-1),r.render(this.sceneLeft,this.camera,t,s||n),this.quadRight.material=e,this.uvClamp.value=this.uvRight,o(Math.round(.5*l.width),0,Math.round(.5*l.width),l.height),a&&i(e,this.cameras[1],1),r.render(this.sceneRight,this.camera,t),this.uvClamp.value=this.uvBoth,o(0,0,l.width,l.height)):(o(0,0,l.width,l.height),a&&i(e,this.sceneEl.camera,0),r.render(this.scene,this.camera,t,s||n)):(o(0,0,l.width,l.height),r.render(this.scene,this.camera,t,s||n)),r.autoClear=s},materialize:function(e){var t=["uniform vec2 uvClamp;","vec4 textureVR( sampler2D sampler, vec2 uv ) {"," return texture2D(sampler, vec2(clamp(uv.x, uvClamp.x, uvClamp.y), uv.y));","} ",e.fragmentShader].join("\n");return e.uniforms.uvClamp=this.uvClamp,new THREE.ShaderMaterial({uniforms:e.uniforms,vertexShader:e.vertexShader||this.vertexShader,fragmentShader:t,depthWrite:!1,depthTest:!1,blending:THREE.NoBlending,fog:!1,extensions:{derivatives:!0},defines:e.defines||{}})},fuse:function(e,t){if(e.length){var i,n=this,o=0,r=[],a=[],l=[],s={},c=!1,u=!1,v={time:this.time,timeDelta:this.timeDelta,resolution:this.resolution};e.forEach(function(e){var t=!0,i=!1,a=[];if("string"==typeof e){var m=n.parseToken.exec(e);if(!m)return;t="!"!==m[4],i="?"===m[4],e=m[1];var p=m[2];if("#"===e[0]){var f=document.querySelector(e);if(!f)return;e={attrName:[e.replace("#","script_"),"_",o++,"_"].join(""),fragment:p?f[p]instanceof Document?f[p].body.textContent:f[p]:f.textContent,depth:void 0!==f.dataset.depth,diffuse:void 0!==f.dataset.diffuse,includes:f.dataset.includes?f.dataset.includes.trim().split(" "):null,defaults:f.dataset.defaults?f.dataset.defaults.trim().split(" "):null}}else{if(!(e=n.effects[e]))return;if(p){if(!(e=e.exports?e.exports[p]:null))return;e.attrName=m[1]+"_"+p+"_"}}m[3]&&(a=m[3].trim().split(" "))}var d=(e.attrName?e.attrName:"undefined_"+o++)+"_";if(d=d.replace("__","_"),e.defaults&&e.defaults.forEach(function(e,t){var i=a[t];r.push(["#define $",t," ",i&&"$"!==i?i:e].join("").replace(/\$/g,d).replace("__","_"))}),e.diffuse&&(u=!0),e.depth&&(c=!0),e.fragment&&r.push(e.fragment.replace(/\$/g,d)),e.uniforms)for(var g in e.uniforms)v[d+g]=e.uniforms[g];e.includes&&e.includes.forEach(function(e){s[e]=!0}),t&&l.push(["  ",d,"main(",i?"origColor, color":"color, origColor",", vUv, depth);"].join(""))});var m={i:"int",f:"float",t:"sampler2D",v2:"vec2",v3:"vec3",c:"vec3",v4:"vec4",m2:"mat2",m3:"mat3",m4:"mat4",b:"bool"};for(i in s)a.push("#include <"+i+">");var p=["void main () {"];v.tDiffuse=this.tDiffuse,u?p.push("  vec4 color = texture2D(tDiffuse, vUv);"):p.push("  vec4 color = vec4(0.0);"),p.push("  vec4 origColor = color;"),v.tDepth=this.tDepth,v.cameraFar=this.cameraFar,v.cameraNear=this.cameraNear,c?p.push("  float depth = texture2D(tDepth, vUv).x;"):p.push("  float depth = 0.0;");for(i in v){var f=v[i];a.push(["uniform",m[f.type],i,";"].join(" "))}a.push("varying vec2 vUv;");var d=[a.join("\n"),r.join("\n"),"\n",p.join("\n"),l.join("\n"),t?"  gl_FragColor = color;":"  gl_FragColor = vec4(color.rgb, 1.0);","}"].join("\n"),g=this.materialize({fragmentShader:d,uniforms:v});return this.sceneEl.components.debug&&console.log(d,g),g}},rebuild:function(){function e(){o.length&&(n.push({pass:t(i.fuse(o),!0)}),o=[])}function t(e,t,n){return{render:function(t,o,r){i.renderPass(e,o,n)},dispose:function(){t&&e.dispose()}}}var i=this,n=[],o=[];this.passes.forEach(function(e){e.dispose&&e.dispose()}),this.data.forEach(function(r){if(!r)return void e();var a,l,s=i.parseToken.exec(r);if(s&&s[1]){if(l=s[1],!(a=i.effects[l]))return void o.push(r);a.pass?(e(),n.push({pass:a.pass,behavior:a})):a.material?(e(),n.push({pass:t(a.material,!1,a.vr),behavior:a})):o.push(r)}}),e(),this.needsUpdate=!1,this.passes=n},isActive:function(e,t){var i=this.sceneEl;if(e.bypass)return!1;if(!!!i.renderTarget)return!1;if(t&&(this.needsResize||e.needsResize)&&e.setSize){var n=i.renderer.getSize();e.setSize(n.width,n.height),delete e.needsResize}return!0},register:function(e){this.effects[e.attrName]=e,this.needsUpdate=!0},unregister:function(e){delete this.effects[e.attrName],this.needsUpdate=!0},tick:function(e,t){var i=this,n=this.sceneEl,o=n.renderer,r=(n.effect,this.renderTarget),a=this.targets,l=n.object3D;if(r&&o){if(this.needsOverride){if(l.onBeforeRender)l.onBeforeRender=function(e,t,n){var o=e.getSize();o.width===r.width&&o.height===r.height||(r.setSize(o.width,o.height),a[0].setSize(o.width,o.height),a[1].setSize(o.width,o.height),i.resolution.value.set(o.width,o.height,1/o.width,1/o.height),i.needsResize=!0,i.resizeTiles()),n instanceof THREE.ArrayCamera?i.cameras=n.cameras:i.cameras.push(n),i.tileLights(e,t,n)};else{var s=o.render;o.render=function(e,t,n,l){if(n===r){var c=o.getSize();c.width===r.width&&c.height===r.height||(r.setSize(c.width,c.height),a[0].setSize(c.width,c.height),a[1].setSize(c.width,c.height),i.resolution.value.set(c.width,c.height,1/c.width,1/c.height),i.needsResize=!0),i.cameras.push(t)}s.call(o,e,t,n,l)}}this.needsOverride=!1}this.cameras=[],this.time.value=e/1e3,this.timeDelta.value=t/1e3,!0===this.needsUpdate&&this.rebuild(),this.setupPasses(),this.tDiffuse.value=this.renderTarget.texture,this.tDepth.value=this.renderTarget.depthTexture;var c=this.sceneEl.camera;this.cameraFar.value=c.far,this.cameraNear.value=c.near}},setupPasses:function(){var e=[],t=this.renderTarget;this.passes.forEach(function(t){t.behavior&&!0===t.behavior.bypass||e.push(t)}),this.sceneEl.renderTarget=e.length&&this.sceneEl.isPlaying?t:null,this._passes=e},tock:function(){var e=this.sceneEl,t=e.renderer,i=this;if(e.renderTarget){var n=e.renderTarget,o=this.targets;this._passes.forEach(function(e,r){var a=r?o[1&r]:n;i.tDiffuse.value=a.texture,e.behavior&&e.behavior.resize&&i.isActive(e.behavior,!0),e.pass.render(t,r<i._passes.length-1?o[r+1&1]:null,a)}),this.needsResize=!1}},resizeTiles:function(){var e=this.LightState,t=e.width,i=e.height;e.cols=Math.ceil(t/32),e.rows=Math.ceil(e.height/32),e.tileData.value=[t,i,.5/Math.ceil(t/32),.5/Math.ceil(i/32)],e.tileTexture.value=new THREE.DataTexture(new Uint8Array(e.cols*e.rows*4),e.cols,e.rows)},tileLights:function(e,t,i){if(i.projectionMatrix){var n=this.LightState,o=this.lightComponents,r=(e.getSize(),n.tileTexture.value.image.data),a=n.lightTexture.value.image.data,l=i.matrixWorldInverse;r.fill(0);var s=new THREE.Vector3;(i instanceof THREE.ArrayCamera?[[.5,0,i.cameras[0]],[.5,.5,i.cameras[1]]]:[1,0,i]).forEach(function(e){o.forEach(function(t,i){s.setFromMatrixPosition(t.el.object3D.matrixWorld);var o=n.width*e[0],c=n.width*e[1],u=self.lightBounds(e[2],s,t.data.radius,o);if(s.applyMatrix4(l),s.toArray(a,4*i),a[4*i+3]=t.data.radius,t.data.color.toArray(a,128+4*i),a[128+4*i+3]=t.data.decay,!(u[1]<0||u[0]>o||u[3]<0||u[2]>n.height)){u[0]<0&&(u[0]=0),u[1]>o&&(u[1]=o),u[2]<0&&(u[2]=0),u[3]>n.height&&(u[3]=n.height);for(var v=Math.floor(i/8),m=7-i%8,p=Math.floor(u[2]/32);p<=Math.ceil(u[3]/32);p++)for(var f=Math.floor((u[0]+c)/32);f<=Math.ceil((u[1]+c)/32);f++)r[4*(n.cols*p+f)+v]|=1<<m}})}),n.tileTexture.value.needsUpdate=!0,n.lightTexture.value.needsUpdate=!0}},lightBounds:function(){let e=new THREE.Vector3;return function(t,i,n,o){for(var r=this.LightState,a=o,l=0,s=r.height,c=0,u=o/2,v=r.height/2,m=0;m<8;m++){e.copy(i),e.x+=1&m?n:-n,e.y+=2&m?n:-n,e.z+=4&m?n:-n;var p=e.project(t),f=p.x*u+u,d=p.y*v+v;a=Math.min(a,f),l=Math.max(l,f),s=Math.min(s,d),c=Math.max(c,d)}return[a,l,s,c]}}()})},function(e,t,i){i(4),i(5),i(6),i(8),i(10),i(11),i(12),i(13),i(16)},function(e,t){AFRAME.registerComponent("outline",{multiple:!0,schema:{enabled:{default:!0},color:{type:"color",default:"#000000"},width:{type:"vec2",default:new THREE.Vector2(1,1)},range:{type:"vec2",default:new THREE.Vector2(0,1500)},strength:{type:"number",default:1},ratio:{type:"number",default:.5},smooth:{default:!1}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTarget=new THREE.WebGLRenderTarget(1,1,e),this.blurTarget=new THREE.WebGLRenderTarget(1,1,e),this.needsResize=!0,this.resolution={type:"v4",value:new THREE.Vector4},this.tockUniforms={resolution:this.resolution,color:{type:"c",value:new THREE.Color},width:{type:"v2",value:null},range:{type:"v2",value:null},strength:{type:"f",value:1}},this.blurDirection={type:"v2",value:new THREE.Vector2},this.exports={sobel:{fragment:this.sobel,uniforms:this.tockUniforms,includes:["packing"],depth:!0},blur:{fragment:this.blur,uniforms:{resolution:this.tockUniforms.resolution,direction:this.blurDirection},diffuse:!0}},this.currentMaterial=this.system.fuse([this.exports.sobel],!0),this.blurMaterial=this.system.fuse([this.exports.blur],!0),this.uniforms={texture:{type:"t",value:this.renderTarget.texture}},this.system.register(this)},update:function(e){this.bypass=!this.data.enabled,this.tockUniforms.color.value.set(this.data.color),this.tockUniforms.width.value=this.data.width,this.tockUniforms.range.value=this.data.range,this.tockUniforms.strength.value=1/this.data.strength},setSize:function(e,t){e=Math.round(e*this.data.ratio),t=Math.round(t*this.data.ratio),this.renderTarget.setSize(e,t),this.blurTarget.setSize(e,t),this.resolution.value.set(e,t,1/e,1/t)},tock:function(){this.system.isActive(this,!0)&&(this.system.renderPass(this.currentMaterial,this.renderTarget),this.system.tDiffuse.value=this.renderTarget,this.data.smooth&&(this.blurDirection.value.set(1,0),this.system.renderPass(this.blurMaterial,this.blurTarget),this.system.tDiffuse.value=this.blurTarget,this.blurDirection.value.set(0,1),this.system.renderPass(this.blurMaterial,this.renderTarget)))},remove:function(){this.system.unregister(this)},diffuse:!0,sobel:["mat3 $G[2];","const mat3 $g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );","const mat3 $g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec3 I[3];","float cnv[2];","float d;","$G[0] = $g0;","$G[1] = $g1;","for (float i=0.0; i<3.0; i++)","for (float j=0.0; j<3.0; j++) {","           d = texture2D(tDepth, uv + resolution.zw * vec2(i-1.0,j-1.0) ).x;","           d = perspectiveDepthToViewZ(d, cameraNear, cameraFar); ","\t\t\tI[int(i)][int(j)] = viewZToOrthographicDepth(d, cameraNear, cameraFar);","}","for (int i=0; i<2; i++) {","float dp3 = dot($G[i][0], I[0]) + dot($G[i][1], I[1]) + dot($G[i][2], I[2]);","cnv[i] = dp3 * dp3; ","}","color = vec4($color, sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));","} "].join("\n"),blur:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","color.a *= 0.44198;","color.a += texture2D(tDiffuse, uv + ($direction * $resolution.zw )).a * 0.27901;","color.a += texture2D(tDiffuse, uv - ($direction * $resolution.zw )).a * 0.27901;","}"].join("\n"),fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","\tvec4 texel = texture2D($texture, uv);","   color.rgb = mix(color.rgb, texel.rgb, smoothstep(0.1,0.3,texel.a));","}"].join("\n")})},function(e,t){AFRAME.registerComponent("film",{multiple:!0,schema:{speed:{default:1},nIntensity:{default:.5},sIntensity:{default:.05},sCount:{default:4096}},init:function(){this.uniforms={speed:{type:"f",value:0},nIntensity:{type:"f",value:.5},sIntensity:{type:"f",value:.05},sCount:{type:"f",value:4096}},this.system=this.el.sceneEl.systems.effects,this.system.register(this)},update:function(){var e=this.data,t=this.uniforms;for(var i in t)e[i]&&(t[i].value=e[i])},remove:function(){this.system.unregister(this)},includes:["common"],diffuse:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 cTextureScreen = color;","   float dx = rand( uv + mod(time, 3.14) * $speed );","   vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );","   vec2 sc = vec2( sin( uv.y * $sCount ), cos( uv.y * $sCount ) );","   cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * $sIntensity;","   cResult = cTextureScreen.rgb + clamp( $nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );","   color.rgb =  cResult; //cResult;","}"].join("\n")})},function(e,t,i){var n=i(7);AFRAME.registerComponent("fxaa",{schema:{default:!0},init:function(){this.system=this.el.sceneEl.systems.effects,this.material=new THREE.ShaderMaterial({fragmentShader:n.fragmentShader,vertexShader:n.vertexShader,uniforms:{tDiffuse:this.system.tDiffuse,resolution:{type:"v2",value:new THREE.Vector2}}}),this.system.register(this),this.needsResize=!0},update:function(){this.bypass=!this.data},setSize:function(e,t){this.material.uniforms.resolution.value.set(e,t)},resize:!0,remove:function(){this.material.dispose(),this.system.unregister(this)}})},function(e,t){e.exports={uniforms:{tDiffuse:{type:"t",value:null},resolution:{type:"v2",value:new THREE.Vector2}},vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 resolution;\n\nvoid main() {\n  vUv = uv;\n  vec2 fragCoord = uv * resolution;\n  vec2 inverseVP = 1.0 / resolution.xy;\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n  v_rgbM = vec2(fragCoord * inverseVP);\n\n  gl_Position = projectionMatrix *\n              modelViewMatrix *\n              vec4(position,1.0);\n}\n",fragmentShader:'#define GLSLIFY 1\nvarying vec2 vUv;\n\n//texcoords computed in vertex step\n//to avoid dependent texture reads\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\n//make sure to have a resolution uniform set to the screen size\nuniform vec2 resolution;\nuniform sampler2D tDiffuse;\n\n/**\nBasic FXAA implementation based on the code on geeks3d.com with the\nmodification that the texture2DLod stuff was removed since it\'s\nunsupported by WebGL.\n\n--\n\nFrom:\nhttps://github.com/mitsuhiko/webgl-meincraft\n\nCopyright (c) 2011 by Armin Ronacher.\n\nSome rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n    * The names of the contributors may not be used to endorse or\n      promote products derived from this software without specific\n      prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n#ifndef FXAA_REDUCE_MIN\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#endif\n#ifndef FXAA_REDUCE_MUL\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#endif\n#ifndef FXAA_SPAN_MAX\n    #define FXAA_SPAN_MAX     8.0\n#endif\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\n    vec4 texColor = texture2D(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid main() {\n  vec2 fragCoord = vUv * resolution;   \n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}\n'}},function(e,t,i){i(9);var n=new THREE.Vector2(1,0),o=new THREE.Vector2(0,1);AFRAME.registerComponent("bloom",{multiple:!0,schema:{enable:{default:!0},strength:{default:1},radius:{default:.4},threshold:{default:.8},filter:{type:"array",default:[]}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5,this.renderTargetBright=new THREE.WebGLRenderTarget(1,1,e),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(n=0;n<this.nMips;n++){var t=new THREE.WebGLRenderTarget(1,1,e);t.texture.name="UnrealBloomPass.h"+n,t.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(t),(t=new THREE.WebGLRenderTarget(1,1,e)).texture.name="UnrealBloomPass.v"+n,t.texture.generateMipmaps=!1,this.renderTargetsVertical.push(t)}this.exports={filter:{uniforms:{luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:.01},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:1}},diffuse:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec4 texel = color;","float v = dot( texel.xyz, vec3( 0.299, 0.587, 0.114 ) );","vec4 outputColor = vec4( $defaultColor.rgb, $defaultOpacity );","float alpha = smoothstep( $luminosityThreshold, $luminosityThreshold + $smoothWidth, v );","color = mix( outputColor, texel, alpha );","}"].join("\n")}},this.materialHighPassFilter=null,this.separableBlurMaterials=[];for(var i=[3,5,7,9,11],n=0;n<this.nMips;n++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(i[n])),this.separableBlurMaterials[n].uniforms.texSize.value=new THREE.Vector2(1,1);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.needsUpdate=!0;var o=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=o,this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.oldClearColor=new THREE.Color,this.uniforms={texture:{type:"t",value:this.renderTargetsHorizontal[0]}},this.needsResize=!0,this.system.register(this)},update:function(e){if(e.filter!==this.data.filter){this.materialHighPassFilter&&this.materialHighPassFilter.dispose();var t=this.data.filter.length?this.data.filter:[this.exports.filter];this.materialHighPassFilter=this.system.fuse(t,!1)}},tock:function(e){if(this.data.enable&&this.system.isActive(this,!0)){var t=this.el.sceneEl,i=t.renderer,r=t.renderTarget;this.oldClearColor.copy(i.getClearColor()),this.oldClearAlpha=i.getClearAlpha();var a=i.autoClear;i.autoClear=!1,i.setClearColor(new THREE.Color(0,0,0),0),this.system.tDiffuse.value=r.texture,this.exports.filter.uniforms.luminosityThreshold.value=this.data.threshold,this.system.renderPass(this.materialHighPassFilter,this.renderTargetBright,null,!1);for(var l=this.renderTargetBright,s=0;s<this.nMips;s++)this.separableBlurMaterials[s].uniforms.colorTexture.value=l.texture,this.separableBlurMaterials[s].uniforms.direction.value=n,this.system.renderPass(this.separableBlurMaterials[s],this.renderTargetsHorizontal[s],!0),this.separableBlurMaterials[s].uniforms.colorTexture.value=this.renderTargetsHorizontal[s].texture,this.separableBlurMaterials[s].uniforms.direction.value=o,this.system.renderPass(this.separableBlurMaterials[s],this.renderTargetsVertical[s],!0),l=this.renderTargetsVertical[s];this.compositeMaterial.uniforms.bloomStrength.value=this.data.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.data.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.system.renderPass(this.compositeMaterial,this.renderTargetsHorizontal[0],null),i.setClearColor(this.oldClearColor,this.oldClearAlpha),i.autoClear=a}},setSize:function(e,t){var i=Math.round(e/2),n=Math.round(t/2);this.renderTargetBright.setSize(i,n);for(var o=0;o<this.nMips;o++)this.renderTargetsHorizontal[o].setSize(i,n),this.renderTargetsVertical[o].setSize(i,n),this.separableBlurMaterials[o].uniforms.texSize.value=new THREE.Vector2(i,n),i=Math.round(i/2),n=Math.round(n/2)},remove:function(){this.system.unregister(this);for(e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(var e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()},getSeperableBlurMaterial:function(e){return this.system.materialize({defines:{KERNEL_RADIUS:e,SIGMA:e},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvUv = uv;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\t\tvarying vec2 vUv;\n\t\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\t\tuniform vec2 texSize;\t\t\t\t\tuniform vec2 direction;\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t\t}\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\t\tvec3 sample1 = textureVR( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\t\tvec3 sample2 = textureVR( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t\t}\t\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t\t}"})},getCompositeMaterial:function(e){return new THREE.ShaderMaterial({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\t\tvoid main() {\n\t\t\t\t\t\tvUv = uv;\n\t\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\t\tuniform float bloomStrength;\t\t\t\t\tuniform float bloomRadius;\t\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t\t \t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t\t}"})},diffuse:!0,defaults:["1.0"],fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","   color.rgb += texture2D($texture, uv).rgb;","}"].join("\n")})},function(e,t){e.exports={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{type:"t",value:null},luminosityThreshold:{type:"f",value:1},smoothWidth:{type:"f",value:1},defaultColor:{type:"c",value:new THREE.Color(0)},defaultOpacity:{type:"f",value:0}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform sampler2D tDiffuse;","uniform vec3 defaultColor;","uniform float defaultOpacity;","uniform float luminosityThreshold;","uniform float smoothWidth;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 luma = vec3( 0.299, 0.587, 0.114 );","float v = dot( texel.xyz, luma );","vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );","float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );","gl_FragColor = mix( outputColor, texel, alpha );","}"].join("\n")}},function(e,t){AFRAME.registerComponent("colors",{multiple:!0,schema:{mode:{default:"map"},lut:{type:"selector"},lutClamp:{default:!1},lutFlip:{default:!1},add:{type:"vec3",default:new THREE.Vector3(0,0,0)},mul:{type:"vec3",default:new THREE.Vector3(1,1,1)},pow:{type:"vec3",default:new THREE.Vector3(1,1,1)},left:{type:"vec3",default:new THREE.Vector3(0,0,0)},right:{type:"vec3",default:new THREE.Vector3(1,1,1)},min:{type:"vec3",default:new THREE.Vector3(0,0,0)},max:{type:"vec3",default:new THREE.Vector3(1,1,1)},quant:{type:"vec3",default:new THREE.Vector3(.2,.2,.2)},orig:{type:"vec3",default:new THREE.Vector3(1,1,1)},red:{type:"vec3",default:new THREE.Vector3(1,0,0)},green:{type:"vec3",default:new THREE.Vector3(0,.5,.5)},blue:{type:"vec3",default:new THREE.Vector3(0,.5,.5)}},init:function(){this.system=this.el.sceneEl.systems.effects,this.uniforms={add:{type:"v3",value:null},mul:{type:"v3",value:null},pow:{type:"v3",value:null},left:{type:"v3",value:null},right:{type:"v3",value:null},min:{type:"v3",value:null},max:{type:"v3",value:null},quant:{type:"v3",value:null},orig:{type:"v3",value:null},red:{type:"v3",value:null},green:{type:"v3",value:null},blue:{type:"v3",value:null},texture:{type:"t",value:new THREE.Texture(void 0,void 0,void 0,void 0,THREE.NearestFilter,THREE.NearestFilter)}},this.rebuild(),this.system.register(this)},update:function(e){var t=this.data,i=this.uniforms;for(var n in i)void 0!==t[n]&&(i[n].value=t[n]);if(this.data.lutFlip===e.lutFlip&&this.data.lutClamp===e.lutClamp&&this.data.mode==e.mode||this.rebuild(),this.data.lut!==e.lut){const e=this.uniforms.texture.value;e.image=this.data.lut,e.needsUpdate=!0}},remove:function(){this.system.unregister(this)},rebuild:function(){for(var e=[],t=this.data.mode,i=0;i<t.length;i++){var n=this.ops[t[i]];n&&e.push(n)}this.fragment=[this.data.lutClamp?"":"#define $LUT_NO_CLAMP 1",this.data.lutFlip?"#define $LUT_FLIP_Y 1":"",this.preFragment,e.join("\n"),"}"].join("\n"),this.system.needsUpdate=!0},ops:{m:"color.rgb *= $mul;",a:"color.rgb += $add;",p:"color.rgb = pow(color.rgb, $pow);",h:"color.rgb = $rgb2hsv(color.rgb);",r:"color.rgb = $hsv2rgb(color.rgb);",s:"color.rgb = smoothstep($left, $right, color.rgb);",l:"color.rgb = $lut(color).rgb;",q:"color.rgb = floor(color.rgb / $quant) * $quant;",c:"color.rgb = clamp(color.rgb, $min, $max);",g:"color.rgb = vec3(dot(color.rgb, vec3(0.299, 0.587, 0.114)));",o:"color.rgb = mix(color.rgb, orig.rgb, $orig);",t:"color.rgb = vec3(dot(color.rgb, $red), dot(color.rgb, $green), dot(color.rgb, $blue));",b:"color.rgb = color.rgb;"},diffuse:!0,preFragment:["vec4 $lut(vec4 textureColor) {","    #ifndef $LUT_NO_CLAMP","        textureColor = clamp(textureColor, 0.0, 1.0);","    #endif","    mediump float blueColor = textureColor.b * 63.0;","    mediump vec2 quad1;","    quad1.y = floor(floor(blueColor) / 8.0);","    quad1.x = floor(blueColor) - (quad1.y * 8.0);","    mediump vec2 quad2;","    quad2.y = floor(ceil(blueColor) / 8.0);","    quad2.x = ceil(blueColor) - (quad2.y * 8.0);","    highp vec2 texPos1;","    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);","    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);","    #ifdef $LUT_FLIP_Y","        texPos1.y = 1.0-texPos1.y;","    #endif","    highp vec2 texPos2;","    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);","    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);","    #ifdef $LUT_FLIP_Y","        texPos2.y = 1.0-texPos2.y;","    #endif","    lowp vec4 newColor1 = texture2D($texture, texPos1);","    lowp vec4 newColor2 = texture2D($texture, texPos2);","    lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));","    return newColor;","}","vec3 $rgb2hsv(vec3 c){","    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);","    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));","    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));","    float d = q.x - min(q.w, q.y);","    float e = 1.0e-10;","    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);","}","vec3 $hsv2rgb(vec3 c)","{","    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);","    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);","    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth){","vec3 orig = color.rgb;"].join("\n")})},function(e,t){AFRAME.registerComponent("glitch",{schema:{default:!0},init:function(){this.system=this.el.sceneEl.systems.effects,this.uniforms={tDisp:{type:"t",value:this.generateHeightmap(64)},amount:{type:"f",value:.08},angle:{type:"f",value:.02},seed:{type:"f",value:.02},seed_x:{type:"f",value:.02},seed_y:{type:"f",value:.02},distortion_x:{type:"f",value:.5},distortion_y:{type:"f",value:.6},col_s:{type:"f",value:.05}},this.exports={glitch:{fragment:this.fragment,uniforms:this.uniforms}},this.material=this.system.fuse([this.exports.glitch]),this.system.register(this)},vr:!0,update:function(){this.bypass=!this.data,this.curF=0,this.generateTrigger()},remove:function(){this.system.unregister(this)},tock:function(){this.uniforms.seed.value=Math.random(),this.curF%this.randX==0?(this.uniforms.amount.value=Math.random()/30,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.seed_x.value=THREE.Math.randFloat(-1,1),this.uniforms.seed_y.value=THREE.Math.randFloat(-1,1),this.uniforms.distortion_x.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_y.value=THREE.Math.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5&&(this.uniforms.amount.value=Math.random()/90,this.uniforms.angle.value=THREE.Math.randFloat(-Math.PI,Math.PI),this.uniforms.distortion_x.value=THREE.Math.randFloat(0,1),this.uniforms.distortion_y.value=THREE.Math.randFloat(0,1),this.uniforms.seed_x.value=THREE.Math.randFloat(-.3,.3),this.uniforms.seed_y.value=THREE.Math.randFloat(-.3,.3)),this.curF++},generateTrigger:function(){this.randX=THREE.Math.randInt(120,240)},generateHeightmap:function(e){for(var t=new Float32Array(e*e*3),i=e*e,n=0;n<i;n++){var o=THREE.Math.randFloat(0,1);t[3*n+0]=o,t[3*n+1]=o,t[3*n+2]=o}var r=new THREE.DataTexture(t,e,e,THREE.RGBFormat,THREE.FloatType);return r.needsUpdate=!0,r},fragment:["float $rand(vec2 co){","return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","vec2 p = uv;","vec2 p2 = vec2( smoothstep(uvClamp.x, uvClamp.y, p.x),p.y);","float xs = floor(gl_FragCoord.x / 0.5);","float ys = floor(gl_FragCoord.y / 0.5);","vec4 normal = texture2D ($tDisp, p2 * $seed * $seed);","if(p2.y < $distortion_x + $col_s && p2.y > $distortion_x - $col_s * $seed) {","if($seed_x>0.){","p.y = 1. - (p.y + $distortion_y);","}","else {","p.y = $distortion_y;","}","}","if(p2.x < $distortion_y + $col_s && p2.x > $distortion_y - $col_s * $seed) {","if( $seed_y > 0.){","p.x = $distortion_x;","}","else {","p.x = 1. - (p.x + $distortion_x);","}","}","p.x+=normal.x* $seed_x * ($seed/5.);","p.y+=normal.y* $seed_y * ($seed/5.);","vec2 offset = $amount * vec2( cos($angle), sin($angle));","vec4 cr = textureVR(tDiffuse, p + offset);","vec4 cga = textureVR(tDiffuse, p);","vec4 cb = textureVR(tDiffuse, p - offset);","color = vec4(cr.r, cga.g, cb.b, cga.a);","vec4 snow = 200.*$amount*vec4($rand(vec2(xs * $seed,ys * $seed*50.))*0.2);","color = color+ snow;","}"].join("\n")})},function(e,t){AFRAME.registerComponent("godrays",{schema:{tint:{type:"color",default:"#FFFFFF"},threshold:{type:"vec4",default:new THREE.Vector4(0,1,1)},src:{type:"selector",default:null},intensity:{default:1},filter:{type:"array",default:[]},ratio:{default:.25}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.rtFilter=new THREE.WebGLRenderTarget(1,1,e),this.rtTextureGodRays1=new THREE.WebGLRenderTarget(1,1,e),this.rtTextureGodRays2=new THREE.WebGLRenderTarget(1,1,e),this.exports={filter:{includes:["packing"],uniforms:{tint:{type:"c",value:new THREE.Color},threshold:{type:"v2",value:new THREE.Vector2(0,1)}},depth:!0,fragment:["void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   float v = viewZToOrthographicDepth(perspectiveDepthToViewZ(depth, cameraNear, cameraFar), cameraNear, cameraFar);","   color.rgb = vec3(smoothstep($threshold.x, $threshold.y, v)) * $tint;","}"].join("\n")},blur:{uniforms:{step:{type:"f",value:1},src:{type:"v3",value:new THREE.Vector3(.5,.5,0)}},fragment:["void $main(inout vec4 color, vec4 orig, vec2 uv, float depth) {","vec2 center = vec2(mix(uvClamp.x, uvClamp.y, $src.x), $src.y);","vec2 delta = center - uv;","float dist = length( delta );","vec2 stepv = $step * delta / dist;","float iters = dist/$step;","vec4 col = vec4(0.0);","if ( 0.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 1.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 2.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 3.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 4.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","uv += stepv;","if ( 5.0 <= iters && uv.y < 1.0 ) col += textureVR( tDiffuse, uv );","color = col/6.0;","}"].join("\n")}},this.materialGodraysGenerate=this.system.fuse([this.exports.blur]),this.uniforms={intensity:{type:"f",value:1},attenuation:{type:"f",value:1},texture:{type:"t",value:this.rtTextureGodRays2}},this.materialFilter=null,this.needsResize=!0,this.system.register(this)},setSize:function(e,t){e=Math.round(e*this.data.ratio),t=Math.round(t*this.data.ratio),this.rtTextureGodRays1.setSize(e,t),this.rtTextureGodRays2.setSize(e,t),this.rtFilter.setSize(e,t)},update:function(e){this.exports.filter.uniforms.tint.value.set(this.data.tint),this.uniforms.intensity.value=this.data.intensity,this.data.filter!==e.filter&&(this.materialFilter&&this.materialFilter.dispose(),this.materialFilter=this.system.fuse(this.data.filter.length?this.data.filter:[this.exports.filter])),this.bypass=null===this.data.src},tock:function(){if(this.system.isActive(this,!0)){var e=this;this.system.tDiffuse.value=this.system.renderTarget.texture,this.system.renderPass(this.materialFilter,this.rtFilter,t);var t=function(t,i,n){var o=new THREE.Vector3,r=new THREE.Vector3,a=e.exports.blur.uniforms.src.value;e.data.src.object3D.getWorldPosition(a),i.getWorldPosition(o),i.getWorldDirection(r),o.sub(a),o.normalize(),r.normalize(),e.uniforms.attenuation.value=Math.pow(Math.max(0,-r.dot(o)),1.33),a.project(i),a.set((a.x+1)/2,(a.y+1)/2,0)},i=1,n=1*Math.pow(6,-i);this.exports.blur.uniforms.step.value=n,this.system.tDiffuse.value=this.rtFilter.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays2,t),i=2,n=1*Math.pow(6,-i),this.exports.blur.uniforms.step.value=n,this.system.tDiffuse.value=this.rtTextureGodRays2.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays1,t),i=3,n=1*Math.pow(6,-i),this.exports.blur.uniforms.step.value=n,this.system.tDiffuse.value=this.rtTextureGodRays1.texture,this.system.renderPass(this.materialGodraysGenerate,this.rtTextureGodRays2,t)}},remove:function(){this.rtTextureGodRays1.dispose(),this.rtTextureGodRays2.dispose(),this.rtFilter.dispose(),this.materialGodraysGenerate.dispose(),this.materialFilter.dispose(),this.system.unregister(this)},diffuse:!0,fragment:["float $blendScreen(float base, float blend) {","    return 1.0-((1.0-base)*(1.0-blend));","}","vec3 $blendScreen(vec3 base, vec3 blend) {","    return vec3($blendScreen(base.r,blend.r),$blendScreen(base.g,blend.g),$blendScreen(base.b,blend.b));","}","vec3 $blendScreen(vec3 base, vec3 blend, float opacity) {","    return ($blendScreen(base, blend) * opacity + base * (1.0 - opacity));","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 texel = texture2D($texture, uv);","   color.rgb = $blendScreen( color.rgb, texel.rgb, $intensity * $attenuation);","}"].join("\n")})},function(e,t,i){var n=i(14),o=i(15);AFRAME.registerComponent("ssao",{schema:{samples:{type:"number",default:16},rings:{type:"number",default:7},radius:{type:"number",default:.5},ratio:{default:.5},intensity:{default:1},maxDepth:{default:.99},bias:{default:.05},scale:{default:.15},blurRadius:{default:7},depthCutoff:{default:10}},init:function(){this.system=this.el.sceneEl.systems.effects;var e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargets=[],this.renderTargets.push(new THREE.WebGLRenderTarget(1,1,e)),this.renderTargets.push(new THREE.WebGLRenderTarget(1,1,e)),this.uniforms={texture:{type:"t",value:this.renderTargets[0].texture},intensity:{type:"f",value:1},maxDepth:{type:"f",value:.99},depthCutoff:{type:"f",default:1}},this.SAOMaterial=null,this.hBlurMaterial=null,this.vBlurMaterial=null,this.sizeUniform={type:"v2",value:new THREE.Vector2},this.system.register(this)},update:function(e){var t=this.data;this.rebuild(t.rings!==e.rings||t.samples!==e.samples,t.blurRadius!==e.blurRadius),this.uniforms.depthCutoff.value=t.depthCutoff,this.uniforms.intensity.value=t.intensity,this.uniforms.maxDepth.value=t.maxDepth,this.SAOMaterial.uniforms.bias.value=t.bias,this.SAOMaterial.uniforms.scale.value=t.scale,this.SAOMaterial.uniforms.kernelRadius.value=t.radius,this.hBlurMaterial.uniforms.depthCutoff.value=t.depthCutoff,this.vBlurMaterial.uniforms.depthCutoff.value=t.depthCutoff},rebuild:function(e,t){var i=this.data;e&&(this.SAOMaterial&&this.SAOMaterial.dispose(),this.SAOMaterial=this.system.materialize(n(!0)),this.SAOMaterial.defines.RINGS=parseInt(i.rings)+".",this.SAOMaterial.defines.SAMPLES=parseInt(i.samples)+".",this.SAOMaterial.uniforms.cameraFar=this.system.cameraFar,this.SAOMaterial.uniforms.cameraNear=this.system.cameraNear),t&&(this.hBlurMaterial&&(this.hBlurMaterial.dispose(),this.vBlurMaterial.dispose()),this.hBlurMaterial=this.system.materialize(o(i.blurRadius,i.blurRadius/2,new THREE.Vector2(1,0))),this.vBlurMaterial=this.system.materialize(o(i.blurRadius,i.blurRadius/2,new THREE.Vector2(0,1))),this.hBlurMaterial.uniforms.size=this.sizeUniform,this.vBlurMaterial.uniforms.size=this.sizeUniform,this.hBlurMaterial.uniforms.cameraFar=this.system.cameraFar,this.hBlurMaterial.uniforms.cameraNear=this.system.cameraNear,this.vBlurMaterial.uniforms.cameraFar=this.system.cameraFar,this.vBlurMaterial.uniforms.cameraNear=this.system.cameraNear)},setSize:function(e,t){e=Math.ceil(e*this.data.ratio),t=Math.ceil(t*this.data.ratio),this.sizeUniform.value.set(e,t),this.renderTargets.forEach(function(i){i.setSize(e,t)})},tock:function(e){this.system.isActive(this,!0)&&(this.SAOMaterial.uniforms.cameraInverseProjectionMatrix.value.getInverse(this.el.sceneEl.camera.projectionMatrix),this.SAOMaterial.uniforms.cameraProjectionMatrix.value=this.el.sceneEl.camera.projectionMatrix,this.SAOMaterial.uniforms.tDepth.value=this.el.sceneEl.renderTarget.depthTexture,this.system.renderPass(this.SAOMaterial,this.renderTargets[0],!0),this.data.blurRadius&&(this.hBlurMaterial.uniforms.tDiffuse.value=this.renderTargets[0].texture,this.system.renderPass(this.hBlurMaterial,this.renderTargets[1],!0),this.vBlurMaterial.uniforms.tDiffuse.value=this.renderTargets[1].texture,this.system.renderPass(this.vBlurMaterial,this.renderTargets[0],!0)))},remove:function(){this.SAOMaterial.dispose(),this.hBlurMaterial.dispose(),this.vBlurMaterial.dispose(),this.renderTargets[0].dispose(),this.renderTargets[1].dispose(),this.system.unregister(this)},includes:["packing"],depth:!0,diffuse:!0,fragment:["float $unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","void $main(inout vec4 color, vec4 origColor, vec2 uv, float depth) {","   vec4 texel = texture2D($texture, uv);","   float z = perspectiveDepthToViewZ( $unpackDepth(texel.xyz), cameraNear, cameraFar );","   float Z = perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","   color.rgb *= abs(z-Z) > $depthCutoff || Z >= $maxDepth * cameraFar ? 1.0  :  1.0 - texel.a * $intensity;","}"].join("\n")})},function(e,t){e.exports=function(e){return{defines:{},uniforms:{tDepth:{type:"t",value:null},cameraNear:{type:"f",value:1},cameraFar:{type:"f",value:100},cameraProjectionMatrix:{type:"m4",value:new THREE.Matrix4},cameraInverseProjectionMatrix:{type:"m4",value:new THREE.Matrix4},scale:{type:"f",value:1},bias:{type:"f",value:.5},minResolution:{type:"f",value:0},kernelRadius:{type:"f",value:.5},randomSeed:{type:"f",value:0},maxDepth:{type:"f",value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#include <common>","#include <packing>","varying vec2 vUv;","uniform sampler2D tDepth;","uniform float cameraNear;","uniform float cameraFar;","uniform mat4 cameraProjectionMatrix;","uniform mat4 cameraInverseProjectionMatrix;","uniform float scale;","uniform float intensity;","uniform float bias;","uniform float kernelRadius;","uniform float minResolution;","uniform float randomSeed;","uniform float maxDepth;","float unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","vec3 packDepth(float depth) {","\tfloat depthVal = depth * (256.0*256.0*256.0 - 1.0) / (256.0*256.0*256.0);","\tvec4 encode = fract( depthVal * vec4(1.0, 256.0, 256.0*256.0, 256.0*256.0*256.0) );","\treturn encode.xyz - encode.yzw / 256.0 + 1.0/512.0;","}","float getViewZ( const in float depth ) {","return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","}","vec3 getViewPosition( const in vec2 screenPosition, const in float depth, const in float viewZ ) {","float clipW = cameraProjectionMatrix[2][3] * viewZ + cameraProjectionMatrix[3][3];","vec4 clipPosition = vec4( ( vec3( screenPosition, depth ) - 0.5 ) * 2.0, 1.0 );","clipPosition *= clipW;","return ( cameraInverseProjectionMatrix * clipPosition ).xyz;","}","vec3 getViewNormal( const in vec3 viewPosition, const in vec2 screenPosition ) {","return normalize( cross( dFdx( viewPosition ), dFdy( viewPosition ) ) );","}","float scaleDividedByCameraFar;","float minResolutionMultipliedByCameraFar;","float getOcclusion( const in vec3 centerViewPosition, const in vec3 centerViewNormal, const in vec3 sampleViewPosition ) {","vec3 viewDelta = sampleViewPosition - centerViewPosition;","float viewDistance = length( viewDelta );","float scaledScreenDistance = scaleDividedByCameraFar * viewDistance;","return max(0.0, (dot(centerViewNormal, viewDelta) - minResolutionMultipliedByCameraFar) / scaledScreenDistance - bias) / (1.0 + pow2( scaledScreenDistance ) );","}","const float ANGLE_STEP = PI2 * RINGS / SAMPLES;","const float INV_NUM_SAMPLES = 1.0 / SAMPLES;","float getAmbientOcclusion( const in vec3 centerViewPosition) {","scaleDividedByCameraFar = scale;","minResolutionMultipliedByCameraFar = minResolution * cameraFar;","vec3 centerViewNormal = getViewNormal( centerViewPosition, vUv );","float angle = rand( vUv + randomSeed ) * PI2;","vec2 radius = vec2( kernelRadius * INV_NUM_SAMPLES );","vec2 radiusStep = radius;","float occlusionSum = 0.;","float weightSum = 0.;","for( int i = 0; i < int(SAMPLES); i ++ ) {","vec2 sampleUv = vUv + vec2( cos( angle ), sin( angle ) ) * radius;","radius += radiusStep;","angle += ANGLE_STEP;","float sampleDepth = textureVR( tDepth, sampleUv ).x;","if( sampleDepth >= ( 1.0 - EPSILON ) ) {","continue;","}","float sampleViewZ = getViewZ( sampleDepth );","vec3 sampleViewPosition = getViewPosition( sampleUv, sampleDepth, sampleViewZ );","occlusionSum += getOcclusion( centerViewPosition, centerViewNormal, sampleViewPosition );","weightSum += 1.0;","}","if( weightSum == 0.0 ) discard;","return occlusionSum / weightSum;","}","void main() {","vec4 texel = texture2D( tDepth, vUv );","float centerDepth = texel.x;","if( centerDepth >= ( maxDepth - EPSILON ) ) {","discard;","}","float centerViewZ = getViewZ( centerDepth );","vec3 viewPosition = getViewPosition( vUv, centerDepth, centerViewZ );","gl_FragColor =  vec4(packDepth(texel.x), getAmbientOcclusion( viewPosition));","}"].join("\n")}}},function(e,t){THREE.BlurShaderUtils={createSampleWeights:function(e,t){for(var i=[],n=0;n<=e;n++)i.push(function(e,t){return Math.exp(-e*e/(t*t*2))/(Math.sqrt(2*Math.PI)*t)}(n,t));return i},createSampleOffsets:function(e,t){for(var i=[],n=0;n<=e;n++)i.push(t.clone().multiplyScalar(n));return i},configure:function(e,t,i){return{sampleUvOffsets:THREE.BlurShaderUtils.createSampleOffsets(e,i),sampleWeights:THREE.BlurShaderUtils.createSampleWeights(e,t)}}},e.exports=function(e,t,i){e=e||4;var n=THREE.BlurShaderUtils.configure(e,t,i);return{defines:{KERNEL_RADIUS:e},uniforms:{tDiffuse:{type:"t",value:null},size:{type:"v2",value:new THREE.Vector2(512,512)},sampleUvOffsets:{type:"v2v",value:n.sampleUvOffsets},sampleWeights:{type:"1fv",value:n.sampleWeights},depthCutoff:{type:"f",value:10},cameraFar:{type:"f",value:1},cameraNear:{type:"f",value:1e3}},vertexShader:["#include <common>","uniform vec2 size;","varying vec2 vUv;","varying vec2 vInvSize;","void main() {","vUv = uv;","vInvSize = 1.0 / size;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["#include <common>","#include <packing>","uniform sampler2D tDiffuse;","uniform vec2 sampleUvOffsets[ KERNEL_RADIUS + 1 ];","uniform float sampleWeights[ KERNEL_RADIUS + 1 ];","uniform float depthCutoff;","uniform float cameraFar;","uniform float cameraNear;","varying vec2 vUv;","varying vec2 vInvSize;","float unpackDepth(vec3 pack) {","\tfloat depth = dot( pack, 1.0 / vec3(1.0, 256.0, 256.0*256.0) );","\treturn depth * (256.0*256.0*256.0) / (256.0*256.0*256.0 - 1.0);","}","float getViewZ( const in float depth ) {","return perspectiveDepthToViewZ( depth, cameraNear, cameraFar );","}","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","vec3 orig = texel.xyz;","float depth = unpackDepth( orig );","if( depth >= ( 1.0 - EPSILON ) ) {","discard;","}","float centerViewZ = -getViewZ( depth );","bool rBreak = false, lBreak = false;","float weightSum = sampleWeights[0];","float AOSum = texel.a * weightSum;","for( int i = 1; i <= KERNEL_RADIUS; i ++ ) {","float sampleWeight = sampleWeights[i];","vec2 sampleUvOffset = sampleUvOffsets[i] * vInvSize;","vec2 sampleUv = vUv + sampleUvOffset;","texel = textureVR( tDiffuse, sampleUv );","float viewZ = -getViewZ(unpackDepth( texel.xyz ));","if( abs( viewZ - centerViewZ ) > depthCutoff ) rBreak = true;","if( ! rBreak ) {","AOSum += texel.a * sampleWeight;","weightSum += sampleWeight;","}","sampleUv = vUv - sampleUvOffset;","texel = textureVR( tDiffuse, sampleUv );","viewZ = -getViewZ(unpackDepth( texel.xyz ));","if( abs( viewZ - centerViewZ ) > depthCutoff ) lBreak = true;","if( ! lBreak ) {","AOSum += texel.a * sampleWeight;","weightSum += sampleWeight;","}","}","gl_FragColor = vec4(orig, AOSum / weightSum);","}"].join("\n")}}},function(e,t){AFRAME.registerComponent("lighty",{schema:{color:{type:"color",default:"#000000"},radius:{type:"number",default:0},decay:{type:"number",default:1}},init:function(){this.el.sceneEl.systems.effects.addLight(this)},remove:function(){this.el.sceneEl.systems.effects.removeLight(this)}})},function(e,t){function i(e){var t={color:new THREE.Color(e.color),emissive:new THREE.Color(e.emissive),emissiveIntensity:e.emissiveIntensity,fog:e.fog,metalness:e.metalness,roughness:e.roughness,wireframe:e.wireframe,wireframeLinewidth:e.wireframeLinewidth};return e.normalMap&&(t.normalScale=e.normalScale),e.ambientOcclusionMap&&(t.aoMapIntensity=e.ambientOcclusionMapIntensity),e.displacementMap&&(t.displacementScale=e.displacementScale,t.displacementBias=e.displacementBias),t}THREE.ShaderChunk.lights_pars_maps+=["#if defined TILED_FORWARD","uniform vec4 tileData;","uniform sampler2D tileTexture;","uniform sampler2D lightTexture;","#endif"].join("\n"),THREE.ShaderChunk.lights_fragment_maps+=["","#if defined TILED_FORWARD","vec2 tUv = floor(gl_FragCoord.xy / tileData.xy * 32.) / 32. + tileData.zw;","vec4 tile = texture2D(tileTexture, tUv);","for (int i=0; i < 4; i++) {","\tfloat tileVal = tile.x * 255.;","  \ttile.xyzw = tile.yzwx;","\tif(tileVal == 0.){ continue; }","  \tfloat tileDiv = 128.;","\tfor (int j=0; j < 8; j++) {","  \t\tif (tileVal < tileDiv) {  tileDiv *= 0.5; continue; }","\t\ttileVal -= tileDiv;","\t\ttileDiv *= 0.5;","  \t\tPointLight pointlight;","\t\tfloat uvx = (float(8 * i + j) + 0.5) / 32.;","  \t\tvec4 lightData = texture2D(lightTexture, vec2(uvx, 0.));","  \t\tvec4 lightColor = texture2D(lightTexture, vec2(uvx, 1.));","  \t\tpointlight.position = lightData.xyz;","  \t\tpointlight.distance = lightData.w;","  \t\tpointlight.color = lightColor.rgb;","  \t\tpointlight.decay = lightColor.a;","  \t\tgetPointDirectLightIrradiance( pointlight, geometry, directLight );","\t\tRE_Direct( directLight, geometry, material, reflectedLight );","\t}","}","#endif"].join("\n");var n=AFRAME.utils,o=new THREE.CubeTextureLoader,r={};AFRAME.registerShader("standard-fx",{schema:{ambientOcclusionMap:{type:"map"},ambientOcclusionMapIntensity:{default:1},ambientOcclusionTextureOffset:{type:"vec2"},ambientOcclusionTextureRepeat:{type:"vec2",default:{x:1,y:1}},color:{type:"color"},displacementMap:{type:"map"},displacementScale:{default:1},displacementBias:{default:.5},displacementTextureOffset:{type:"vec2"},displacementTextureRepeat:{type:"vec2",default:{x:1,y:1}},emissive:{type:"color",default:"#000"},emissiveIntensity:{default:1},envMap:{default:""},fog:{default:!0},height:{default:256},metalness:{default:0,min:0,max:1},metalnessMap:{type:"map"},metalnessTextureOffset:{type:"vec2"},metalnessTextureRepeat:{type:"vec2",default:{x:1,y:1}},normalMap:{type:"map"},normalScale:{type:"vec2",default:{x:1,y:1}},normalTextureOffset:{type:"vec2"},normalTextureRepeat:{type:"vec2",default:{x:1,y:1}},offset:{type:"vec2",default:{x:0,y:0}},repeat:{type:"vec2",default:{x:1,y:1}},roughness:{default:.5,min:0,max:1},roughnessMap:{type:"map"},roughnessTextureOffset:{type:"vec2"},roughnessTextureRepeat:{type:"vec2",default:{x:1,y:1}},sphericalEnvMap:{type:"map"},src:{type:"map"},width:{default:512},wireframe:{default:!1},wireframeLinewidth:{default:2}},init:function(e){this.material=new THREE.MeshStandardMaterial(i(e)),n.material.updateMap(this,e),e.normalMap&&n.material.updateDistortionMap("normal",this,e),e.displacementMap&&n.material.updateDistortionMap("displacement",this,e),e.ambientOcclusionMap&&n.material.updateDistortionMap("ambientOcclusion",this,e),e.metalnessMap&&n.material.updateDistortionMap("metalness",this,e),e.roughnessMap&&n.material.updateDistortionMap("roughness",this,e),this.updateEnvMap(e),this.material.onBeforeCompile=function(e){e.uniforms.tileData=State.tileData,e.uniforms.tileTexture=State.tileTexture,e.uniforms.lightTexture=State.lightTexture,e.defines.TILED_FORWARD=1}},update:function(e){this.updateMaterial(e),n.material.updateMap(this,e),e.normalMap&&n.material.updateDistortionMap("normal",this,e),e.displacementMap&&n.material.updateDistortionMap("displacement",this,e),e.ambientOcclusionMap&&n.material.updateDistortionMap("ambientOcclusion",this,e),e.metalnessMap&&n.material.updateDistortionMap("metalness",this,e),e.roughnessMap&&n.material.updateDistortionMap("roughness",this,e),this.updateEnvMap(e)},updateMaterial:function(e){var t=this.material;e=i(e),Object.keys(e).forEach(function(i){t[i]=e[i]})},updateEnvMap:function(e){var t=this,i=this.material,a=e.envMap,l=e.sphericalEnvMap;return!a&&!l||this.isLoadingEnvMap?(i.envMap=null,void(i.needsUpdate=!0)):(this.isLoadingEnvMap=!0,l?void this.el.sceneEl.systems.material.loadTexture(l,{src:l},function(e){t.isLoadingEnvMap=!1,e.mapping=THREE.SphericalReflectionMapping,i.envMap=e,n.material.handleTextureEvents(t.el,e),i.needsUpdate=!0}):r[a]?void r[a].then(function(e){t.isLoadingEnvMap=!1,i.envMap=e,n.material.handleTextureEvents(t.el,e),i.needsUpdate=!0}):void(r[a]=new Promise(function(e){n.srcLoader.validateCubemapSrc(a,function(r){o.load(r,function(o){t.isLoadingEnvMap=!1,i.envMap=o,n.material.handleTextureEvents(t.el,o),e(o)})})})))}})}])}();let x=window.CS1={};e(x),d(x),_(x),h(x),y(x)}();
//# sourceMappingURL=bundle.js.map
